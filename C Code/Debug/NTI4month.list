
NTI4month.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016d8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001808  08001808  00011808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001888  08001888  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001888  08001888  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001888  08001888  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001888  08001888  00011888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800188c  0800188c  0001188c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001890  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000004  08001894  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08001894  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000036ea  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e29  00000000  00000000  0002375a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000450  00000000  00000000  00024588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000031b  00000000  00000000  000249d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000138f  00000000  00000000  00024cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000241c  00000000  00000000  00026082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005ffc  00000000  00000000  0002849e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f5c  00000000  00000000  0002e49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0002f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080017f0 	.word	0x080017f0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080017f0 	.word	0x080017f0

08000170 <DMB>:
/*
 *
 *
 * */

void DMB(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	__asm volatile ("dmb");
 8000174:	f3bf 8f5f 	dmb	sy
	// Use "dmb" assembly instruction
}
 8000178:	bf00      	nop
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <Bootloader_Init>:

__attribute__((always_inline)) static inline void __set_MSP(u32 topOfMainStack) {
	__asm volatile("MSR msp, %0\n" : : "r" (topOfMainStack) );
}

void Bootloader_Init() {
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	///  UART INIT
	RCC_voidEnablePeriphralCLK(APB2_USART1EN);
 8000184:	20d6      	movs	r0, #214	; 0xd6
 8000186:	f000 ffb1 	bl	80010ec <RCC_voidEnablePeriphralCLK>
	UART1_voidInit(); // init uart 9600
 800018a:	f001 f987 	bl	800149c <UART1_voidInit>
	NVIC_u8Set_EN_IRQ(INTERRUPT_USART1);
 800018e:	2025      	movs	r0, #37	; 0x25
 8000190:	f000 ff7a 	bl	8001088 <NVIC_u8Set_EN_IRQ>
	UART1_u8EnterruptCallBackRX(&RX_Fun);
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <Bootloader_Init+0x28>)
 8000196:	f001 fa87 	bl	80016a8 <UART1_u8EnterruptCallBackRX>
	UART1_u8EnterruptEnRX();
 800019a:	f001 fa5d 	bl	8001658 <UART1_u8EnterruptEnRX>

	STK_u8Init();
 800019e:	f001 f8b3 	bl	8001308 <STK_u8Init>
	//CRC_enuReset();

}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	08000759 	.word	0x08000759

080001ac <Bootloader_Jump_To_Application>:

void Bootloader_Jump_To_Application() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
	u16 local_u8CalculatePages = 5000;
 80001b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80001b6:	807b      	strh	r3, [r7, #2]
// earease date
	FLASH_enCalculatePages(BOOT_APPDDRESSMARK, &local_u8CalculatePages);
 80001b8:	1cbb      	adds	r3, r7, #2
 80001ba:	4619      	mov	r1, r3
 80001bc:	481c      	ldr	r0, [pc, #112]	; (8000230 <Bootloader_Jump_To_Application+0x84>)
 80001be:	f000 fb2a 	bl	8000816 <FLASH_enCalculatePages>
	FLASH_enErasePage(local_u8CalculatePages);
 80001c2:	887b      	ldrh	r3, [r7, #2]
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 fb92 	bl	80008f0 <FLASH_enErasePage>
	// Disable interrupts
	UART1_u8EnterruptDsRX();
 80001cc:	f001 fa58 	bl	8001680 <UART1_u8EnterruptDsRX>
	GPIO_u8DeInit();
 80001d0:	f000 fcdc 	bl	8000b8c <GPIO_u8DeInit>
	// Deinitialize peripherals
	RCC_voidDisablePeriphralCLK(APB2_IOPAEN);
 80001d4:	20ca      	movs	r0, #202	; 0xca
 80001d6:	f000 ffdf 	bl	8001198 <RCC_voidDisablePeriphralCLK>
	RCC_voidDisablePeriphralCLK(APB2_IOPBEN);
 80001da:	20cb      	movs	r0, #203	; 0xcb
 80001dc:	f000 ffdc 	bl	8001198 <RCC_voidDisablePeriphralCLK>
	RCC_voidDisablePeriphralCLK(APB2_IOPCEN);
 80001e0:	20cc      	movs	r0, #204	; 0xcc
 80001e2:	f000 ffd9 	bl	8001198 <RCC_voidDisablePeriphralCLK>
	RCC_voidDisablePeriphralCLK(APB2_USART1EN);
 80001e6:	20d6      	movs	r0, #214	; 0xd6
 80001e8:	f000 ffd6 	bl	8001198 <RCC_voidDisablePeriphralCLK>
	RCC_voidDisablePeriphralCLK(APB1_USART2EN);
 80001ec:	f240 103d 	movw	r0, #317	; 0x13d
 80001f0:	f000 ffd2 	bl	8001198 <RCC_voidDisablePeriphralCLK>

	// Set the SCB value
	DMB();
 80001f4:	f7ff ffbc 	bl	8000170 <DMB>
	SCB->VTOR = FLASH_RESET_HANDLER;
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <Bootloader_Jump_To_Application+0x88>)
 80001fa:	4a0f      	ldr	r2, [pc, #60]	; (8000238 <Bootloader_Jump_To_Application+0x8c>)
 80001fc:	609a      	str	r2, [r3, #8]
	DMB();
 80001fe:	f7ff ffb7 	bl	8000170 <DMB>
// set msp
	__set_MSP(*(volatile u32*) FLASH_BASE_ADDRESS);
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <Bootloader_Jump_To_Application+0x90>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	607b      	str	r3, [r7, #4]
	__asm volatile("MSR msp, %0\n" : : "r" (topOfMainStack) );
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f383 8808 	msr	MSP, r3
}
 800020e:	bf00      	nop

	u32 *address = (u32*) (FLASH_RESET_HANDLER);
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <Bootloader_Jump_To_Application+0x8c>)
 8000212:	60fb      	str	r3, [r7, #12]
	u32 instruction = *address;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	60bb      	str	r3, [r7, #8]
	// check on application
	if (instruction != 0xffffffff) {
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000220:	d001      	beq.n	8000226 <Bootloader_Jump_To_Application+0x7a>
		((void (*)(void)) instruction)();
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	4798      	blx	r3

		//do nothong4
	}

	//jumpToApplication();
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	0800f800 	.word	0x0800f800
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	08008004 	.word	0x08008004
 800023c:	08008000 	.word	0x08008000

08000240 <Bootloader_Jump_To_FactoryApplication>:
void Bootloader_Jump_To_FactoryApplication() {
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
	// but marker
	if (*(u16*) BOOT_APPDDRESSMARK == BOOT_FLASHAPPMARKER) {
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <Bootloader_Jump_To_FactoryApplication+0x84>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800024e:	4293      	cmp	r3, r2
 8000250:	d004      	beq.n	800025c <Bootloader_Jump_To_FactoryApplication+0x1c>
		//do nothing
	} else {
		FLASH_enWriteData(BOOT_APPDDRESSMARK, BOOT_FLASHAPPMARKER);
 8000252:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8000256:	481b      	ldr	r0, [pc, #108]	; (80002c4 <Bootloader_Jump_To_FactoryApplication+0x84>)
 8000258:	f000 fb7e 	bl	8000958 <FLASH_enWriteData>

	}
	// Disable interrupts
	UART1_u8EnterruptDsRX();
 800025c:	f001 fa10 	bl	8001680 <UART1_u8EnterruptDsRX>
	UART2_u8EnterruptDsRX();
 8000260:	f001 fa8e 	bl	8001780 <UART2_u8EnterruptDsRX>

	GPIO_u8DeInit();
 8000264:	f000 fc92 	bl	8000b8c <GPIO_u8DeInit>
	// Deinitialize peripherals
	RCC_voidDisablePeriphralCLK(APB2_IOPAEN);
 8000268:	20ca      	movs	r0, #202	; 0xca
 800026a:	f000 ff95 	bl	8001198 <RCC_voidDisablePeriphralCLK>
	RCC_voidDisablePeriphralCLK(APB2_IOPBEN);
 800026e:	20cb      	movs	r0, #203	; 0xcb
 8000270:	f000 ff92 	bl	8001198 <RCC_voidDisablePeriphralCLK>
	RCC_voidDisablePeriphralCLK(APB2_IOPCEN);
 8000274:	20cc      	movs	r0, #204	; 0xcc
 8000276:	f000 ff8f 	bl	8001198 <RCC_voidDisablePeriphralCLK>
	RCC_voidDisablePeriphralCLK(APB2_USART1EN);
 800027a:	20d6      	movs	r0, #214	; 0xd6
 800027c:	f000 ff8c 	bl	8001198 <RCC_voidDisablePeriphralCLK>
	RCC_voidDisablePeriphralCLK(APB1_USART2EN);
 8000280:	f240 103d 	movw	r0, #317	; 0x13d
 8000284:	f000 ff88 	bl	8001198 <RCC_voidDisablePeriphralCLK>

	// Set the SCB value
	DMB();
 8000288:	f7ff ff72 	bl	8000170 <DMB>
	SCB->VTOR = FACTORY_FLASH_RESET_HANDLER;
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <Bootloader_Jump_To_FactoryApplication+0x88>)
 800028e:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <Bootloader_Jump_To_FactoryApplication+0x8c>)
 8000290:	609a      	str	r2, [r3, #8]
	DMB();
 8000292:	f7ff ff6d 	bl	8000170 <DMB>
// set msp
	__set_MSP(*(volatile u32*) FACTORY_FLASH_BASE_ADDRESS);
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <Bootloader_Jump_To_FactoryApplication+0x90>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	607b      	str	r3, [r7, #4]
	__asm volatile("MSR msp, %0\n" : : "r" (topOfMainStack) );
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f383 8808 	msr	MSP, r3
}
 80002a2:	bf00      	nop

	u32 *address = (u32*) (FACTORY_FLASH_RESET_HANDLER);
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <Bootloader_Jump_To_FactoryApplication+0x8c>)
 80002a6:	60fb      	str	r3, [r7, #12]
	u32 instruction = *address;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	60bb      	str	r3, [r7, #8]
	// check on application
	if (instruction != 0xffffffff) {
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002b4:	d001      	beq.n	80002ba <Bootloader_Jump_To_FactoryApplication+0x7a>
		((void (*)(void)) instruction)();
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	4798      	blx	r3

		//do nothong4
	}

	//jumpToApplication();
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	0800f800 	.word	0x0800f800
 80002c8:	e000ed00 	.word	0xe000ed00
 80002cc:	08002004 	.word	0x08002004
 80002d0:	08002000 	.word	0x08002000

080002d4 <Bootloader_voidfReciveFlash>:
void Bootloader_voidfReciveFlash() {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	; 0x28
 80002d8:	af02      	add	r7, sp, #8

	Bool_t boot_enuCheckSum = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	77fb      	strb	r3, [r7, #31]
	u8 boot_u8CheckSumValue = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	77bb      	strb	r3, [r7, #30]
	Bool_t boot_enuSelectApp = FALSE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	777b      	strb	r3, [r7, #29]
	static Bool_t bootRuntimeout = TRUE;
	// switch Main App and factory app and chaeck for time out
	if (bootRuntimeout == TRUE) {
 80002e6:	4b5b      	ldr	r3, [pc, #364]	; (8000454 <Bootloader_voidfReciveFlash+0x180>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d116      	bne.n	800031c <Bootloader_voidfReciveFlash+0x48>
		boot_enuSelectApp = localBootloader_SellectAPP();
 80002ee:	f000 fa11 	bl	8000714 <localBootloader_SellectAPP>
 80002f2:	4603      	mov	r3, r0
 80002f4:	777b      	strb	r3, [r7, #29]
		if (boot_enuSelectApp == FALSE) {
 80002f6:	7f7b      	ldrb	r3, [r7, #29]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <Bootloader_voidfReciveFlash+0x36>
			STK_u8StopTimer();
 80002fc:	f001 f848 	bl	8001390 <STK_u8StopTimer>
			STK_u8SetIntervalSingle(TIMEOUTDEALY + TIMEOUTDEALYFORREQ,
 8000300:	4955      	ldr	r1, [pc, #340]	; (8000458 <Bootloader_voidfReciveFlash+0x184>)
 8000302:	4856      	ldr	r0, [pc, #344]	; (800045c <Bootloader_voidfReciveFlash+0x188>)
 8000304:	f001 f810 	bl	8001328 <STK_u8SetIntervalSingle>
 8000308:	e005      	b.n	8000316 <Bootloader_voidfReciveFlash+0x42>
					Bootloader_StateMachienChangeToApp);
		} else {
			STK_u8StopTimer();
 800030a:	f001 f841 	bl	8001390 <STK_u8StopTimer>
			STK_u8SetIntervalSingle(TIMEOUTDEALY + TIMEOUTDEALYFORREQ,
 800030e:	4954      	ldr	r1, [pc, #336]	; (8000460 <Bootloader_voidfReciveFlash+0x18c>)
 8000310:	4852      	ldr	r0, [pc, #328]	; (800045c <Bootloader_voidfReciveFlash+0x188>)
 8000312:	f001 f809 	bl	8001328 <STK_u8SetIntervalSingle>
					Bootloader_StateMachienChangeToFactoryApp);

		}

		bootRuntimeout = FALSE;
 8000316:	4b4f      	ldr	r3, [pc, #316]	; (8000454 <Bootloader_voidfReciveFlash+0x180>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]

	 // do nothing
	 }
	 */

	if (dataReciev == 1) {
 800031c:	4b51      	ldr	r3, [pc, #324]	; (8000464 <Bootloader_voidfReciveFlash+0x190>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	f040 8092 	bne.w	800044a <Bootloader_voidfReciveFlash+0x176>

		if (Flash_lock == 1) {
 8000326:	4b50      	ldr	r3, [pc, #320]	; (8000468 <Bootloader_voidfReciveFlash+0x194>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d104      	bne.n	8000338 <Bootloader_voidfReciveFlash+0x64>
			Flash_lock = 0;
 800032e:	4b4e      	ldr	r3, [pc, #312]	; (8000468 <Bootloader_voidfReciveFlash+0x194>)
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]

#if  TESTING_MODE
			BootLocationEreas();
 8000334:	f000 f8ac 	bl	8000490 <BootLocationEreas>
			// do nothing
		}
		//CRC_enuWriteDataRegisterSoftWareArray(
		//	(u8*) Global_u8ArryReciveDirectUart,
		//	(u8) Global_u8StackPointerArryRecive);
		RedesignHex1Bytes((u8*) Global_u8ArryReciveDirectUart,
 8000338:	2228      	movs	r2, #40	; 0x28
 800033a:	494c      	ldr	r1, [pc, #304]	; (800046c <Bootloader_voidfReciveFlash+0x198>)
 800033c:	484c      	ldr	r0, [pc, #304]	; (8000470 <Bootloader_voidfReciveFlash+0x19c>)
 800033e:	f000 fdcd 	bl	8000edc <RedesignHex1Bytes>
				(u8*) RedesignHexdata, HEXFILESIZE);
		u16 ReturnAdd = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	837b      	strh	r3, [r7, #26]
		u8 ReturnSize = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	767b      	strb	r3, [r7, #25]
		u8 ReturnTybe = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	763b      	strb	r3, [r7, #24]
		u8 ReturnChecksum = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	75fb      	strb	r3, [r7, #23]
		u8 ReturnData[16] = { 0 };
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	f107 0308 	add.w	r3, r7, #8
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]

		HEX_voidParseFrame((u8*) RedesignHexdata, &ReturnAdd, ReturnData,
 8000362:	f107 0019 	add.w	r0, r7, #25
 8000366:	1d3a      	adds	r2, r7, #4
 8000368:	f107 011a 	add.w	r1, r7, #26
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	f107 0317 	add.w	r3, r7, #23
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	4603      	mov	r3, r0
 800037a:	483c      	ldr	r0, [pc, #240]	; (800046c <Bootloader_voidfReciveFlash+0x198>)
 800037c:	f000 fd60 	bl	8000e40 <HEX_voidParseFrame>
				&ReturnSize, &ReturnChecksum, &ReturnTybe);
		boot_u8CheckSumValue = DataCeckSum(RedesignHexdata, HEXFILESIZE,
 8000380:	7dfb      	ldrb	r3, [r7, #23]
 8000382:	461a      	mov	r2, r3
 8000384:	2128      	movs	r1, #40	; 0x28
 8000386:	4839      	ldr	r0, [pc, #228]	; (800046c <Bootloader_voidfReciveFlash+0x198>)
 8000388:	f000 fe4e 	bl	8001028 <DataCeckSum>
 800038c:	4603      	mov	r3, r0
 800038e:	77bb      	strb	r3, [r7, #30]
				ReturnChecksum);
		if (boot_u8CheckSumValue == ReturnChecksum) {
 8000390:	7dfb      	ldrb	r3, [r7, #23]
 8000392:	7fba      	ldrb	r2, [r7, #30]
 8000394:	429a      	cmp	r2, r3
 8000396:	d102      	bne.n	800039e <Bootloader_voidfReciveFlash+0xca>
			boot_enuCheckSum = TRUE;
 8000398:	2301      	movs	r3, #1
 800039a:	77fb      	strb	r3, [r7, #31]
 800039c:	e001      	b.n	80003a2 <Bootloader_voidfReciveFlash+0xce>
		} else {
			boot_enuCheckSum = FALSE;
 800039e:	2300      	movs	r3, #0
 80003a0:	77fb      	strb	r3, [r7, #31]

		}
		UART1_u8SendNumString(boot_enuCheckSum);
 80003a2:	7ffb      	ldrb	r3, [r7, #31]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 f903 	bl	80015b0 <UART1_u8SendNumString>
		 Global_u32FlashAddrssLocation = (ReturnData[0] << 8 | ReturnData[1])
		 << 16;

		 } else */

		if (ReturnTybe == HEX_DATARECORDER) {
 80003aa:	7e3b      	ldrb	r3, [r7, #24]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d112      	bne.n	80003d6 <Bootloader_voidfReciveFlash+0x102>
			STK_u8StopTimer();
 80003b0:	f000 ffee 	bl	8001390 <STK_u8StopTimer>
			STK_u8SetIntervalSingle(TIMEOUTDEALY,
 80003b4:	492a      	ldr	r1, [pc, #168]	; (8000460 <Bootloader_voidfReciveFlash+0x18c>)
 80003b6:	482f      	ldr	r0, [pc, #188]	; (8000474 <Bootloader_voidfReciveFlash+0x1a0>)
 80003b8:	f000 ffb6 	bl	8001328 <STK_u8SetIntervalSingle>

			//CRC_enuWriteDataRegisterArry((u64*) (Global_u8ArryReciveDirectUart+8), ReturnSize/2);
			//	UART1_u8SendStringBusyW8("----\n");

#if TESTING_MODE
			FLASH_enWriteArray(FLASH_BASE_ADDRESSTest + (ReturnAdd),
 80003bc:	8b7b      	ldrh	r3, [r7, #26]
 80003be:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80003c2:	4618      	mov	r0, r3
 80003c4:	7e7b      	ldrb	r3, [r7, #25]
 80003c6:	085b      	lsrs	r3, r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	461a      	mov	r2, r3
 80003d0:	f000 fafc 	bl	80009cc <FLASH_enWriteArray>
 80003d4:	e014      	b.n	8000400 <Bootloader_voidfReciveFlash+0x12c>
					ReturnSize / 2, (u16*) ReturnData);
#endif

			//UART1_u8SendStringBusyW8("WROTE");

		} else if (ReturnTybe == HEX_ENDOFRECORD) {
 80003d6:	7e3b      	ldrb	r3, [r7, #24]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d111      	bne.n	8000400 <Bootloader_voidfReciveFlash+0x12c>
			 UART1_u8SendStringBusyW8("END");
			 UART1_u8SendStringBusyW8("\n");

			 UART1_u8SendStringBusyW8("OK");
			 */
			STK_u8StopTimer();
 80003dc:	f000 ffd8 	bl	8001390 <STK_u8StopTimer>
			 u32 CRC_Get = 0;
			 CRC_enuReadRegister(&CRC_Get);
			 UART1_u8SendNumString(CRC_Get);
			 CRC_enuResetSoftWare();
			 */
			u16 local_u8CalculatePages = 5000;
 80003e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80003e4:	807b      	strh	r3, [r7, #2]
			FLASH_enCalculatePages(BOOT_DDRESSMARK, &local_u8CalculatePages);
 80003e6:	1cbb      	adds	r3, r7, #2
 80003e8:	4619      	mov	r1, r3
 80003ea:	4823      	ldr	r0, [pc, #140]	; (8000478 <Bootloader_voidfReciveFlash+0x1a4>)
 80003ec:	f000 fa13 	bl	8000816 <FLASH_enCalculatePages>
			FLASH_enErasePage(local_u8CalculatePages);
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fa7b 	bl	80008f0 <FLASH_enErasePage>
			Global_Bootloader_enuStateMachien = BOOT_JUMPTOTHEMAINAPP;
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <Bootloader_voidfReciveFlash+0x1a8>)
 80003fc:	2204      	movs	r2, #4
 80003fe:	701a      	strb	r2, [r3, #0]

		 Global_u8StackPointerArryRecive = 0;
		 dataReciev = 0;
		 */

		if (boot_enuCheckSum == TRUE) {
 8000400:	7ffb      	ldrb	r3, [r7, #31]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d112      	bne.n	800042c <Bootloader_voidfReciveFlash+0x158>
			//	UART2_u8SendStringBusyW8("\n");
			//	UART2_u8SendStringBusyW8("OK");
			UART1_u8SendStringBusyW8("\n");
 8000406:	481e      	ldr	r0, [pc, #120]	; (8000480 <Bootloader_voidfReciveFlash+0x1ac>)
 8000408:	f001 f8a0 	bl	800154c <UART1_u8SendStringBusyW8>
			UART1_u8SendStringBusyW8("OK");
 800040c:	481d      	ldr	r0, [pc, #116]	; (8000484 <Bootloader_voidfReciveFlash+0x1b0>)
 800040e:	f001 f89d 	bl	800154c <UART1_u8SendStringBusyW8>

			Global_u8StackPointerArryRecive = 0;
 8000412:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <Bootloader_voidfReciveFlash+0x1b4>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
			dataReciev = 0;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <Bootloader_voidfReciveFlash+0x190>)
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
			Global_u8StackPointerArryRecive = 0;
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <Bootloader_voidfReciveFlash+0x1b4>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
			dataReciev = 0;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <Bootloader_voidfReciveFlash+0x190>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
			//do nothing
		}

	}

}
 800042a:	e00e      	b.n	800044a <Bootloader_voidfReciveFlash+0x176>
		} else if (boot_enuCheckSum == FALSE) {
 800042c:	7ffb      	ldrb	r3, [r7, #31]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d10b      	bne.n	800044a <Bootloader_voidfReciveFlash+0x176>
			UART1_u8SendStringBusyW8("\n");
 8000432:	4813      	ldr	r0, [pc, #76]	; (8000480 <Bootloader_voidfReciveFlash+0x1ac>)
 8000434:	f001 f88a 	bl	800154c <UART1_u8SendStringBusyW8>
			UART1_u8SendStringBusyW8("NOK");
 8000438:	4814      	ldr	r0, [pc, #80]	; (800048c <Bootloader_voidfReciveFlash+0x1b8>)
 800043a:	f001 f887 	bl	800154c <UART1_u8SendStringBusyW8>
			Global_u8StackPointerArryRecive = 0;
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <Bootloader_voidfReciveFlash+0x1b4>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
			dataReciev = 0;
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <Bootloader_voidfReciveFlash+0x190>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
}
 800044a:	bf00      	nop
 800044c:	3720      	adds	r7, #32
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000002 	.word	0x20000002
 8000458:	08000695 	.word	0x08000695
 800045c:	00e4e1c0 	.word	0x00e4e1c0
 8000460:	080006ad 	.word	0x080006ad
 8000464:	200000b4 	.word	0x200000b4
 8000468:	20000001 	.word	0x20000001
 800046c:	2000008c 	.word	0x2000008c
 8000470:	20000024 	.word	0x20000024
 8000474:	004c4b40 	.word	0x004c4b40
 8000478:	0800f000 	.word	0x0800f000
 800047c:	20000000 	.word	0x20000000
 8000480:	08001808 	.word	0x08001808
 8000484:	0800180c 	.word	0x0800180c
 8000488:	20000088 	.word	0x20000088
 800048c:	08001810 	.word	0x08001810

08000490 <BootLocationEreas>:

void BootLocationEreas() {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
	u16 local_u16page = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	80bb      	strh	r3, [r7, #4]
	FLASH_enCalculatePages(FLASH_BASE_ADDRESS, &local_u16page);
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4619      	mov	r1, r3
 800049e:	480e      	ldr	r0, [pc, #56]	; (80004d8 <BootLocationEreas+0x48>)
 80004a0:	f000 f9b9 	bl	8000816 <FLASH_enCalculatePages>
	UART1_u8SendByteBusyw8(local_u16page);
 80004a4:	88bb      	ldrh	r3, [r7, #4]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 f82f 	bl	800150c <UART1_u8SendByteBusyw8>
	for (u8 indxFlash_u8Page = local_u16page;
 80004ae:	88bb      	ldrh	r3, [r7, #4]
 80004b0:	71fb      	strb	r3, [r7, #7]
 80004b2:	e006      	b.n	80004c2 <BootLocationEreas+0x32>
			indxFlash_u8Page < local_u16page + FLASH_ERASE_SIZE;
			indxFlash_u8Page++) {
		FLASH_enErasePage(indxFlash_u8Page);
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 fa1a 	bl	80008f0 <FLASH_enErasePage>
			indxFlash_u8Page++) {
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	3301      	adds	r3, #1
 80004c0:	71fb      	strb	r3, [r7, #7]
			indxFlash_u8Page < local_u16page + FLASH_ERASE_SIZE;
 80004c2:	88bb      	ldrh	r3, [r7, #4]
 80004c4:	f103 0209 	add.w	r2, r3, #9
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	daf2      	bge.n	80004b4 <BootLocationEreas+0x24>

	}
}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	08008000 	.word	0x08008000

080004dc <Bootloader_voidfRunnable>:

void Bootloader_voidfRunnable() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	Bool_t boot_enuSelectApp = FALSE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	71fb      	strb	r3, [r7, #7]

	switch (Global_Bootloader_enuStateMachien) {
 80004e6:	4b46      	ldr	r3, [pc, #280]	; (8000600 <Bootloader_voidfRunnable+0x124>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b07      	cmp	r3, #7
 80004ec:	f200 8082 	bhi.w	80005f4 <Bootloader_voidfRunnable+0x118>
 80004f0:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <Bootloader_voidfRunnable+0x1c>)
 80004f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f6:	bf00      	nop
 80004f8:	0800053d 	.word	0x0800053d
 80004fc:	08000519 	.word	0x08000519
 8000500:	080005f5 	.word	0x080005f5
 8000504:	080005db 	.word	0x080005db
 8000508:	080005e1 	.word	0x080005e1
 800050c:	080005ed 	.word	0x080005ed
 8000510:	0800056b 	.word	0x0800056b
 8000514:	080005e7 	.word	0x080005e7
	case BOOT_CHECKFORUPDEATE:

		Bool_t local_State = localBootloader_updateAvailable();
 8000518:	f000 f8d4 	bl	80006c4 <localBootloader_updateAvailable>
 800051c:	4603      	mov	r3, r0
 800051e:	71bb      	strb	r3, [r7, #6]
		if (local_State == TRUE) {
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d106      	bne.n	8000534 <Bootloader_voidfRunnable+0x58>
// go to state request .
			Global_Bootloader_enuStateMachien = BOOT_REQESTHEX;
 8000526:	4b36      	ldr	r3, [pc, #216]	; (8000600 <Bootloader_voidfRunnable+0x124>)
 8000528:	2206      	movs	r2, #6
 800052a:	701a      	strb	r2, [r3, #0]
			Global_u8FrameSendRequestFlag = 1;
 800052c:	4b35      	ldr	r3, [pc, #212]	; (8000604 <Bootloader_voidfRunnable+0x128>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
		} else {
			Global_Bootloader_enuStateMachien = BOOT_WAITING;
		}
		break;
 8000532:	e060      	b.n	80005f6 <Bootloader_voidfRunnable+0x11a>
			Global_Bootloader_enuStateMachien = BOOT_WAITING;
 8000534:	4b32      	ldr	r3, [pc, #200]	; (8000600 <Bootloader_voidfRunnable+0x124>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		break;
 800053a:	e05c      	b.n	80005f6 <Bootloader_voidfRunnable+0x11a>
	case BOOT_WAITING:

		boot_enuSelectApp = localBootloader_SellectAPP();
 800053c:	f000 f8ea 	bl	8000714 <localBootloader_SellectAPP>
 8000540:	4603      	mov	r3, r0
 8000542:	71fb      	strb	r3, [r7, #7]
		if (boot_enuSelectApp == FALSE) {
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d106      	bne.n	8000558 <Bootloader_voidfRunnable+0x7c>
			STK_u8StartTimer();
 800054a:	f000 ff41 	bl	80013d0 <STK_u8StartTimer>
			STK_u8SetIntervalSingle(TIMEOUTDEALY,
 800054e:	492e      	ldr	r1, [pc, #184]	; (8000608 <Bootloader_voidfRunnable+0x12c>)
 8000550:	482e      	ldr	r0, [pc, #184]	; (800060c <Bootloader_voidfRunnable+0x130>)
 8000552:	f000 fee9 	bl	8001328 <STK_u8SetIntervalSingle>
 8000556:	e005      	b.n	8000564 <Bootloader_voidfRunnable+0x88>
					Bootloader_StateMachienChangeToApp);
		} else {
			STK_u8StartTimer();
 8000558:	f000 ff3a 	bl	80013d0 <STK_u8StartTimer>
			STK_u8SetIntervalSingle(TIMEOUTDEALY,
 800055c:	492c      	ldr	r1, [pc, #176]	; (8000610 <Bootloader_voidfRunnable+0x134>)
 800055e:	482b      	ldr	r0, [pc, #172]	; (800060c <Bootloader_voidfRunnable+0x130>)
 8000560:	f000 fee2 	bl	8001328 <STK_u8SetIntervalSingle>
					Bootloader_StateMachienChangeToFactoryApp);
		}

		Bootloader_HandelFlames();
 8000564:	f000 f85c 	bl	8000620 <Bootloader_HandelFlames>
		//UART1_u8SendStringBusyW8("Wait");

		break;
 8000568:	e045      	b.n	80005f6 <Bootloader_voidfRunnable+0x11a>
	case BOOT_REQESTHEX:
		// Uart send command for Update
		boot_enuSelectApp = localBootloader_SellectAPP();
 800056a:	f000 f8d3 	bl	8000714 <localBootloader_SellectAPP>
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
		if (boot_enuSelectApp == FALSE) {
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d106      	bne.n	8000586 <Bootloader_voidfRunnable+0xaa>
			STK_u8StartTimer();
 8000578:	f000 ff2a 	bl	80013d0 <STK_u8StartTimer>
			STK_u8SetIntervalSingle(TIMEOUTDEALY + TIMEOUTDEALYFORREQ,
 800057c:	4922      	ldr	r1, [pc, #136]	; (8000608 <Bootloader_voidfRunnable+0x12c>)
 800057e:	4825      	ldr	r0, [pc, #148]	; (8000614 <Bootloader_voidfRunnable+0x138>)
 8000580:	f000 fed2 	bl	8001328 <STK_u8SetIntervalSingle>
 8000584:	e003      	b.n	800058e <Bootloader_voidfRunnable+0xb2>
					Bootloader_StateMachienChangeToApp);
		} else {

			STK_u8SetIntervalSingle(TIMEOUTDEALY + TIMEOUTDEALYFORREQ,
 8000586:	4922      	ldr	r1, [pc, #136]	; (8000610 <Bootloader_voidfRunnable+0x134>)
 8000588:	4822      	ldr	r0, [pc, #136]	; (8000614 <Bootloader_voidfRunnable+0x138>)
 800058a:	f000 fecd 	bl	8001328 <STK_u8SetIntervalSingle>
					Bootloader_StateMachienChangeToFactoryApp);

		}

		if (Global_u8FrameSendRequestFlag == 1) {
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <Bootloader_voidfRunnable+0x128>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d11e      	bne.n	80005d4 <Bootloader_voidfRunnable+0xf8>
			// 	UART1_u8SendStringBusyW8("DIAG_1_UPDATE_END");

			//UART1_u8SendStringBusyW8("A\n");

			Global_Bootloader_enuStateMachien = BOOT_RECIVINGHEX;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <Bootloader_voidfRunnable+0x124>)
 8000598:	2203      	movs	r2, #3
 800059a:	701a      	strb	r2, [r3, #0]

			Global_u8FrameSendRequestFlag = 0;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <Bootloader_voidfRunnable+0x128>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
			//UART2_u8SendStringBusyW8("BOOT");
			//UART2_u8SendStringBusyW8("\n");

			UART1_u8SendStringBusyW8("BOOT");
 80005a2:	481d      	ldr	r0, [pc, #116]	; (8000618 <Bootloader_voidfRunnable+0x13c>)
 80005a4:	f000 ffd2 	bl	800154c <UART1_u8SendStringBusyW8>
			UART1_u8SendStringBusyW8("\n");
 80005a8:	481c      	ldr	r0, [pc, #112]	; (800061c <Bootloader_voidfRunnable+0x140>)
 80005aa:	f000 ffcf 	bl	800154c <UART1_u8SendStringBusyW8>
			Delay(100);
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f000 f912 	bl	80007d8 <Delay>
			UART1_u8SendStringBusyW8("BOOT");
 80005b4:	4818      	ldr	r0, [pc, #96]	; (8000618 <Bootloader_voidfRunnable+0x13c>)
 80005b6:	f000 ffc9 	bl	800154c <UART1_u8SendStringBusyW8>
			UART1_u8SendStringBusyW8("\n");
 80005ba:	4818      	ldr	r0, [pc, #96]	; (800061c <Bootloader_voidfRunnable+0x140>)
 80005bc:	f000 ffc6 	bl	800154c <UART1_u8SendStringBusyW8>
			Delay(200);
 80005c0:	20c8      	movs	r0, #200	; 0xc8
 80005c2:	f000 f909 	bl	80007d8 <Delay>

			UART1_u8SendStringBusyW8("BOOT");
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <Bootloader_voidfRunnable+0x13c>)
 80005c8:	f000 ffc0 	bl	800154c <UART1_u8SendStringBusyW8>
			UART1_u8SendStringBusyW8("\n");
 80005cc:	4813      	ldr	r0, [pc, #76]	; (800061c <Bootloader_voidfRunnable+0x140>)
 80005ce:	f000 ffbd 	bl	800154c <UART1_u8SendStringBusyW8>
			//UART1_u8SendStringBusyW8("\n");

		} else {
			Bootloader_HandelFlames();
		}
		break;
 80005d2:	e010      	b.n	80005f6 <Bootloader_voidfRunnable+0x11a>
			Bootloader_HandelFlames();
 80005d4:	f000 f824 	bl	8000620 <Bootloader_HandelFlames>
		break;
 80005d8:	e00d      	b.n	80005f6 <Bootloader_voidfRunnable+0x11a>
	case BOOT_CHECKSTATES:

		break;
	case BOOT_RECIVINGHEX:

		Bootloader_voidfReciveFlash();
 80005da:	f7ff fe7b 	bl	80002d4 <Bootloader_voidfReciveFlash>
		break;
 80005de:	e00a      	b.n	80005f6 <Bootloader_voidfRunnable+0x11a>

	case BOOT_JUMPTOTHEMAINAPP:
		Bootloader_Jump_To_Application();
 80005e0:	f7ff fde4 	bl	80001ac <Bootloader_Jump_To_Application>
		break;
 80005e4:	e007      	b.n	80005f6 <Bootloader_voidfRunnable+0x11a>
	case BOOT_JUMPTOTHEFACTORYAPP:
		Bootloader_Jump_To_FactoryApplication();
 80005e6:	f7ff fe2b 	bl	8000240 <Bootloader_Jump_To_FactoryApplication>
		break;
 80005ea:	e004      	b.n	80005f6 <Bootloader_voidfRunnable+0x11a>

	case BOOT_ERROR:
		// report error  and go Waiting
		Global_Bootloader_enuStateMachien = BOOT_WAITING;
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <Bootloader_voidfRunnable+0x124>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
		break;
 80005f2:	e000      	b.n	80005f6 <Bootloader_voidfRunnable+0x11a>
	default:
		break;
 80005f4:	bf00      	nop
	}

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000
 8000604:	20000020 	.word	0x20000020
 8000608:	08000695 	.word	0x08000695
 800060c:	004c4b40 	.word	0x004c4b40
 8000610:	080006ad 	.word	0x080006ad
 8000614:	00e4e1c0 	.word	0x00e4e1c0
 8000618:	08001814 	.word	0x08001814
 800061c:	08001808 	.word	0x08001808

08000620 <Bootloader_HandelFlames>:
void Bootloader_HandelFlames(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	u16 local_u16DataCheckOverFrame = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	80fb      	strh	r3, [r7, #6]
	u8 localArray_u8temparr[2] = { 0 };
 800062a:	2300      	movs	r3, #0
 800062c:	80bb      	strh	r3, [r7, #4]
// check on frist 2bytes for Stages data
	if (Global_u8StackPointerArryRecive > 1) {
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <Bootloader_HandelFlames+0x64>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d913      	bls.n	800065e <Bootloader_HandelFlames+0x3e>
		RedesignHex1Bytes((u8*) Global_u8ArryReciveDirectUart,
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2202      	movs	r2, #2
 800063a:	4619      	mov	r1, r3
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <Bootloader_HandelFlames+0x68>)
 800063e:	f000 fc4d 	bl	8000edc <RedesignHex1Bytes>
				localArray_u8temparr, 2);
		local_u16DataCheckOverFrame = ((u16) localArray_u8temparr[0] << 8)
 8000642:	793b      	ldrb	r3, [r7, #4]
 8000644:	021b      	lsls	r3, r3, #8
				| localArray_u8temparr[1];
 8000646:	b21a      	sxth	r2, r3
 8000648:	797b      	ldrb	r3, [r7, #5]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21b      	sxth	r3, r3
		local_u16DataCheckOverFrame = ((u16) localArray_u8temparr[0] << 8)
 8000650:	80fb      	strh	r3, [r7, #6]
		Global_u8StackPointerArryRecive = 0;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <Bootloader_HandelFlames+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
		*(u16*) Global_u8ArryReciveDirectUart = 0;
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <Bootloader_HandelFlames+0x68>)
 800065a:	2200      	movs	r2, #0
 800065c:	801a      	strh	r2, [r3, #0]
	} else {
		//do nothing
	}

// switch on cases .. flash sequence .. update sequances ..
	switch (local_u16DataCheckOverFrame) {
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000664:	4293      	cmp	r3, r2
 8000666:	d108      	bne.n	800067a <Bootloader_HandelFlames+0x5a>

	case BOOT_FRAMECASE_FLASHING:
		STK_u8StopTimer();
 8000668:	f000 fe92 	bl	8001390 <STK_u8StopTimer>
		//send for server for data .
		UART1_u8SendStringBusyW8("ACKFLASH");
 800066c:	4807      	ldr	r0, [pc, #28]	; (800068c <Bootloader_HandelFlames+0x6c>)
 800066e:	f000 ff6d 	bl	800154c <UART1_u8SendStringBusyW8>
		Global_Bootloader_enuStateMachien = BOOT_RECIVINGHEX;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <Bootloader_HandelFlames+0x70>)
 8000674:	2203      	movs	r2, #3
 8000676:	701a      	strb	r2, [r3, #0]
		break;
 8000678:	e000      	b.n	800067c <Bootloader_HandelFlames+0x5c>
	default:
		break;
 800067a:	bf00      	nop
	}

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000088 	.word	0x20000088
 8000688:	20000024 	.word	0x20000024
 800068c:	0800181c 	.word	0x0800181c
 8000690:	20000000 	.word	0x20000000

08000694 <Bootloader_StateMachienChangeToApp>:
static void Bootloader_StateMachienChangeToApp() {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	Global_Bootloader_enuStateMachien = BOOT_JUMPTOTHEMAINAPP;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <Bootloader_StateMachienChangeToApp+0x14>)
 800069a:	2204      	movs	r2, #4
 800069c:	701a      	strb	r2, [r3, #0]
	STK_u8StopTimer();
 800069e:	f000 fe77 	bl	8001390 <STK_u8StopTimer>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000000 	.word	0x20000000

080006ac <Bootloader_StateMachienChangeToFactoryApp>:
static void Bootloader_StateMachienChangeToFactoryApp() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	Global_Bootloader_enuStateMachien = BOOT_JUMPTOTHEFACTORYAPP;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <Bootloader_StateMachienChangeToFactoryApp+0x14>)
 80006b2:	2207      	movs	r2, #7
 80006b4:	701a      	strb	r2, [r3, #0]
	STK_u8StopTimer();
 80006b6:	f000 fe6b 	bl	8001390 <STK_u8StopTimer>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000000 	.word	0x20000000

080006c4 <localBootloader_updateAvailable>:

static Bool_t localBootloader_updateAvailable(void) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	Bool_t local_BReturn = TRUE;
 80006ca:	2301      	movs	r3, #1
 80006cc:	71fb      	strb	r3, [r7, #7]
	u16 *local_ptrFindMarker = (u16*) BOOT_DDRESSMARK;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <localBootloader_updateAvailable+0x44>)
 80006d0:	603b      	str	r3, [r7, #0]
	if (local_ptrFindMarker >= (u16*) FLASH_START
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80006d8:	d30f      	bcc.n	80006fa <localBootloader_updateAvailable+0x36>
			&& local_ptrFindMarker <= (u16*) FLASH_END) {
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <localBootloader_updateAvailable+0x48>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d80b      	bhi.n	80006fa <localBootloader_updateAvailable+0x36>
		if (*local_ptrFindMarker == BOOT_FLASHMARK) {
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d103      	bne.n	80006f6 <localBootloader_updateAvailable+0x32>
			// do noting
			// earease this location later
			Global_Bootloader_enuStateMachien = BOOT_REQESTHEX;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <localBootloader_updateAvailable+0x4c>)
 80006f0:	2206      	movs	r2, #6
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e001      	b.n	80006fa <localBootloader_updateAvailable+0x36>

		} else {

			local_BReturn = FALSE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	71fb      	strb	r3, [r7, #7]
		}

	}

	return local_BReturn;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	0800f000 	.word	0x0800f000
 800070c:	0807ffff 	.word	0x0807ffff
 8000710:	20000000 	.word	0x20000000

08000714 <localBootloader_SellectAPP>:
static Bool_t localBootloader_SellectAPP(void) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
	Bool_t local_BReturn = TRUE;
 800071a:	2301      	movs	r3, #1
 800071c:	71fb      	strb	r3, [r7, #7]
	u16 *local_ptrFindMarker = (u16*) BOOT_APPDDRESSMARK;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <localBootloader_SellectAPP+0x3c>)
 8000720:	603b      	str	r3, [r7, #0]
	if (local_ptrFindMarker >= (u16*) FLASH_START
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000728:	d30b      	bcc.n	8000742 <localBootloader_SellectAPP+0x2e>
			&& local_ptrFindMarker <= (u16*) FLASH_END) {
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <localBootloader_SellectAPP+0x40>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d807      	bhi.n	8000742 <localBootloader_SellectAPP+0x2e>
		if (*local_ptrFindMarker == BOOT_FLASHAPPMARKER) {
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800073a:	4293      	cmp	r3, r2
 800073c:	d001      	beq.n	8000742 <localBootloader_SellectAPP+0x2e>
			// earease this location later
			//	Global_Bootloader_enuStateMachien = BOOT_JUMPTOTHEFACTORYAPP;

		} else {

			local_BReturn = FALSE;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]
		}

	}

	return local_BReturn;
 8000742:	79fb      	ldrb	r3, [r7, #7]
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	0800f800 	.word	0x0800f800
 8000754:	0807ffff 	.word	0x0807ffff

08000758 <RX_Fun>:
void RX_Fun(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	FlagCounter++;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <RX_Fun+0x68>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <RX_Fun+0x68>)
 8000764:	6013      	str	r3, [r2, #0]
	static u8 local_u8datalast = 0;
	static u16 local_u8Counter = 0;

	UART1_u8RecieveByte(&local_u8datalast);
 8000766:	4817      	ldr	r0, [pc, #92]	; (80007c4 <RX_Fun+0x6c>)
 8000768:	f000 ff0e 	bl	8001588 <UART1_u8RecieveByte>
//	UART2_u8SendByteBusyw8(local_u8datalast);
	if (local_u8datalast != ':' && local_u8datalast != '#') {
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <RX_Fun+0x6c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b3a      	cmp	r3, #58	; 0x3a
 8000772:	d010      	beq.n	8000796 <RX_Fun+0x3e>
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <RX_Fun+0x6c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b23      	cmp	r3, #35	; 0x23
 800077a:	d00c      	beq.n	8000796 <RX_Fun+0x3e>
		Global_u8ArryReciveDirectUart[Global_u8StackPointerArryRecive] =
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <RX_Fun+0x70>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <RX_Fun+0x6c>)
 8000784:	7819      	ldrb	r1, [r3, #0]
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <RX_Fun+0x74>)
 8000788:	5499      	strb	r1, [r3, r2]
				local_u8datalast;
		Global_u8StackPointerArryRecive++;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <RX_Fun+0x70>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <RX_Fun+0x70>)
 8000794:	701a      	strb	r2, [r3, #0]
	}

	if (local_u8datalast == '#') {
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <RX_Fun+0x6c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b23      	cmp	r3, #35	; 0x23
 800079c:	d10e      	bne.n	80007bc <RX_Fun+0x64>
		Global_u8ArryReciveDirectUart[Global_u8StackPointerArryRecive] = 0;
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <RX_Fun+0x70>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <RX_Fun+0x74>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	5499      	strb	r1, [r3, r2]
		dataReciev = 1;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <RX_Fun+0x78>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
		local_u8Counter++;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <RX_Fun+0x7c>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <RX_Fun+0x7c>)
 80007ba:	801a      	strh	r2, [r3, #0]
		//	UART2_u8SendNumString(local_u8Counter);

	}

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000b8 	.word	0x200000b8
 80007c4:	200000bc 	.word	0x200000bc
 80007c8:	20000088 	.word	0x20000088
 80007cc:	20000024 	.word	0x20000024
 80007d0:	200000b4 	.word	0x200000b4
 80007d4:	200000be 	.word	0x200000be

080007d8 <Delay>:
#include "../LIBS/STD_TYPES.h"
#include "../LIBS/BIT_MATH.h"

#include "Delay.h"

void Delay(u32 local_u32Time_delay) {
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

	for (u32 local_index = 0; local_index <= local_u32Time_delay;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e00d      	b.n	8000802 <Delay+0x2a>
			local_index++) {
		for (u32 local_index = 0; local_index <= local_u32Time_delay;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	e003      	b.n	80007f4 <Delay+0x1c>
				local_index++)
			asm("NOP");
 80007ec:	bf00      	nop
				local_index++)
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
		for (u32 local_index = 0; local_index <= local_u32Time_delay;
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d9f7      	bls.n	80007ec <Delay+0x14>
			local_index++) {
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
	for (u32 local_index = 0; local_index <= local_u32Time_delay;
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d9ed      	bls.n	80007e6 <Delay+0xe>
	}
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <FLASH_enCalculatePages>:

#include "FLASH_Private.h"
#include "FLASH_Conf.h"
#include "FLASH_Interface.h"

FLASH_enERR_T FLASH_enCalculatePages(u32 Copy_Address, u16 *Ptr_u16ReturnData) {
 8000816:	b4b0      	push	{r4, r5, r7}
 8000818:	b087      	sub	sp, #28
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	6039      	str	r1, [r7, #0]
	FLASH_enERR_T Local_state = FLASH_OK;
 8000820:	2100      	movs	r1, #0
 8000822:	75f9      	strb	r1, [r7, #23]

	s64 Local_calculatedData = Copy_Address - FLASH_START;
 8000824:	6879      	ldr	r1, [r7, #4]
 8000826:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800082a:	2000      	movs	r0, #0
 800082c:	460a      	mov	r2, r1
 800082e:	4603      	mov	r3, r0
 8000830:	e9c7 2302 	strd	r2, r3, [r7, #8]

	Local_calculatedData = Local_calculatedData / FLASH_PAGE;
 8000834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	da06      	bge.n	800084a <FLASH_enCalculatePages+0x34>
 800083c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000840:	1854      	adds	r4, r2, r1
 8000842:	f143 0500 	adc.w	r5, r3, #0
 8000846:	4622      	mov	r2, r4
 8000848:	462b      	mov	r3, r5
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 0100 	mov.w	r1, #0
 8000852:	0a90      	lsrs	r0, r2, #10
 8000854:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8000858:	1299      	asrs	r1, r3, #10
 800085a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	if (Local_calculatedData < 0) {
 800085e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000862:	2b00      	cmp	r3, #0
 8000864:	da02      	bge.n	800086c <FLASH_enCalculatePages+0x56>
		Local_state = FLASH_ERR;
 8000866:	2307      	movs	r3, #7
 8000868:	75fb      	strb	r3, [r7, #23]
 800086a:	e002      	b.n	8000872 <FLASH_enCalculatePages+0x5c>
	} else {
		*Ptr_u16ReturnData = Local_calculatedData;
 800086c:	893a      	ldrh	r2, [r7, #8]
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	801a      	strh	r2, [r3, #0]
	}

	return Local_state;
 8000872:	7dfb      	ldrb	r3, [r7, #23]
}
 8000874:	4618      	mov	r0, r3
 8000876:	371c      	adds	r7, #28
 8000878:	46bd      	mov	sp, r7
 800087a:	bcb0      	pop	{r4, r5, r7}
 800087c:	4770      	bx	lr
	...

08000880 <FLASH_enWaitClr>:
FLASH_enERR_T FLASH_enWaitClr() {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
	FLASH_enERR_T Local_state = FLASH_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	71fb      	strb	r3, [r7, #7]
	while (READ_BIT(FLASH->FLASH_SR, SR_BSY))
 800088a:	bf00      	nop
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <FLASH_enWaitClr+0x6c>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f9      	bne.n	800088c <FLASH_enWaitClr+0xc>
		; // Wait while the flash is busy
	if (READ_BIT(FLASH->FLASH_SR, SR_EOP)) // Check if End of Operation flag is set
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <FLASH_enWaitClr+0x6c>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d005      	beq.n	80008b0 <FLASH_enWaitClr+0x30>
		SET_BIT(FLASH->FLASH_SR, SR_EOP);    // Clear the flag
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <FLASH_enWaitClr+0x6c>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4a10      	ldr	r2, [pc, #64]	; (80008ec <FLASH_enWaitClr+0x6c>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	60d3      	str	r3, [r2, #12]
	if (READ_BIT(FLASH->FLASH_SR, SR_PGERR)) // Check for programming error
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <FLASH_enWaitClr+0x6c>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d005      	beq.n	80008c8 <FLASH_enWaitClr+0x48>
		SET_BIT(FLASH->FLASH_SR, SR_PGERR);       // Clear the flag
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <FLASH_enWaitClr+0x6c>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <FLASH_enWaitClr+0x6c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	60d3      	str	r3, [r2, #12]
	if (READ_BIT(FLASH->FLASH_SR, SR_WRPRTERR)) // Check for write protection error
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <FLASH_enWaitClr+0x6c>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d005      	beq.n	80008e0 <FLASH_enWaitClr+0x60>
		SET_BIT(FLASH->FLASH_SR, SR_WRPRTERR);  // Clear the flag
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <FLASH_enWaitClr+0x6c>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <FLASH_enWaitClr+0x6c>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	60d3      	str	r3, [r2, #12]

	return Local_state;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40022000 	.word	0x40022000

080008f0 <FLASH_enErasePage>:
FLASH_enERR_T FLASH_enErasePage(u8 Copy_u8page) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]

	FLASH_enERR_T Local_state = FLASH_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]

	u32 local_u32PageAddress = FLASH_START + (Copy_u8page * FLASH_PAGE);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000904:	029b      	lsls	r3, r3, #10
 8000906:	60bb      	str	r3, [r7, #8]
	if (local_u32PageAddress < FLASH_END) {
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	4a11      	ldr	r2, [pc, #68]	; (8000950 <FLASH_enErasePage+0x60>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d21a      	bcs.n	8000946 <FLASH_enErasePage+0x56>
		FLASH_enUnlock();
 8000910:	f000 f8d8 	bl	8000ac4 <FLASH_enUnlock>
		SET_BIT(FLASH->FLASH_CR, CR_PER);           // set page erase
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <FLASH_enErasePage+0x64>)
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <FLASH_enErasePage+0x64>)
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	6113      	str	r3, [r2, #16]
		FLASH->FLASH_AR = local_u32PageAddress;   //select page add
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <FLASH_enErasePage+0x64>)
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	6153      	str	r3, [r2, #20]
		SET_BIT(FLASH->FLASH_CR, CR_STRT);          // Start
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <FLASH_enErasePage+0x64>)
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <FLASH_enErasePage+0x64>)
 800092c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000930:	6113      	str	r3, [r2, #16]

		FLASH_enWaitClr();                                 //wait and clr
 8000932:	f7ff ffa5 	bl	8000880 <FLASH_enWaitClr>
		CLR_BIT(FLASH->FLASH_CR, CR_PER);           // clr page erase
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <FLASH_enErasePage+0x64>)
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	4a06      	ldr	r2, [pc, #24]	; (8000954 <FLASH_enErasePage+0x64>)
 800093c:	f023 0302 	bic.w	r3, r3, #2
 8000940:	6113      	str	r3, [r2, #16]
		FLASH_enlock();
 8000942:	f000 f8ef 	bl	8000b24 <FLASH_enlock>
	} else {
		//do nothing
	}
	return Local_state;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	0807ffff 	.word	0x0807ffff
 8000954:	40022000 	.word	0x40022000

08000958 <FLASH_enWriteData>:

FLASH_enERR_T FLASH_enWriteData(u32 ptrAddress, u16 Copy_u8Data) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	807b      	strh	r3, [r7, #2]

	FLASH_enERR_T Local_state = FLASH_OK;
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]
	Local_state = FLASH_enUnlock();
 8000968:	f000 f8ac 	bl	8000ac4 <FLASH_enUnlock>
 800096c:	4603      	mov	r3, r0
 800096e:	73fb      	strb	r3, [r7, #15]

	if (*(volatile u32*) ptrAddress != 0xffffffff) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000978:	d002      	beq.n	8000980 <FLASH_enWriteData+0x28>

		Local_state = FLASH_WRITTEN;
 800097a:	2301      	movs	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	e01d      	b.n	80009bc <FLASH_enWriteData+0x64>
	} else {
		FLASH_enWaitClr();         // wait and clr
 8000980:	f7ff ff7e 	bl	8000880 <FLASH_enWaitClr>
		if (Local_state == FLASH_OK) {
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d103      	bne.n	8000992 <FLASH_enWriteData+0x3a>
			Local_state = FlASH_enEnablePrograming();
 800098a:	f000 f873 	bl	8000a74 <FlASH_enEnablePrograming>
 800098e:	4603      	mov	r3, r0
 8000990:	73fb      	strb	r3, [r7, #15]
		} else {
			//do nothing
		}
		//Write Data on flash location
		//check on location
		if ((ptrAddress) > FLASH_START && (ptrAddress) < FLASH_END
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000998:	d90a      	bls.n	80009b0 <FLASH_enWriteData+0x58>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <FLASH_enWriteData+0x70>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d206      	bcs.n	80009b0 <FLASH_enWriteData+0x58>
				&& Local_state == FLASH_OK) {
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d103      	bne.n	80009b0 <FLASH_enWriteData+0x58>
			*(volatile u16*) ptrAddress = Copy_u8Data;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	887a      	ldrh	r2, [r7, #2]
 80009ac:	801a      	strh	r2, [r3, #0]
 80009ae:	e001      	b.n	80009b4 <FLASH_enWriteData+0x5c>

		} else {

			//out of range
			Local_state = FLASH_OUTOFRANGE;
 80009b0:	2302      	movs	r3, #2
 80009b2:	73fb      	strb	r3, [r7, #15]
		}

		FLASH_enWaitClr();         // wait and clr
 80009b4:	f7ff ff64 	bl	8000880 <FLASH_enWaitClr>

		FlASH_enDisablePrograming();
 80009b8:	f000 f870 	bl	8000a9c <FlASH_enDisablePrograming>
	}

	return Local_state;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]

}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	0807ffff 	.word	0x0807ffff

080009cc <FLASH_enWriteArray>:
FLASH_enERR_T FLASH_enWriteArray(u32 ptrAddress, u32 Copy_Size, u16 *Arr_u8Data) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]

	FLASH_enERR_T Local_state = FLASH_OK;
 80009d8:	2300      	movs	r3, #0
 80009da:	75fb      	strb	r3, [r7, #23]
	Local_state = FLASH_enUnlock();
 80009dc:	f000 f872 	bl	8000ac4 <FLASH_enUnlock>
 80009e0:	4603      	mov	r3, r0
 80009e2:	75fb      	strb	r3, [r7, #23]
	FLASH_enWaitClr();         // wait and clr
 80009e4:	f7ff ff4c 	bl	8000880 <FLASH_enWaitClr>
	if (Local_state == FLASH_OK) {
 80009e8:	7dfb      	ldrb	r3, [r7, #23]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d103      	bne.n	80009f6 <FLASH_enWriteArray+0x2a>
		Local_state = FlASH_enEnablePrograming();
 80009ee:	f000 f841 	bl	8000a74 <FlASH_enEnablePrograming>
 80009f2:	4603      	mov	r3, r0
 80009f4:	75fb      	strb	r3, [r7, #23]
	} else {
		//do nothing
	}

	// wright seq on flash
	for (u32 Local_Index = 0; Local_Index < Copy_Size; Local_Index++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	e02e      	b.n	8000a5a <FLASH_enWriteArray+0x8e>

		if ((ptrAddress + (Local_Index * FLASH_WORD)) > FLASH_START
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	005a      	lsls	r2, r3, #1
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000a08:	d91f      	bls.n	8000a4a <FLASH_enWriteArray+0x7e>
				&& (ptrAddress + (Local_Index * FLASH_WORD)) < FLASH_END
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	005a      	lsls	r2, r3, #1
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <FLASH_enWriteArray+0xa4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d218      	bcs.n	8000a4a <FLASH_enWriteArray+0x7e>
				&& Local_state == FLASH_OK) {
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d115      	bne.n	8000a4a <FLASH_enWriteArray+0x7e>

			if (*(volatile u32*) (ptrAddress + (Local_Index * FLASH_WORD))
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	005a      	lsls	r2, r3, #1
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4413      	add	r3, r2
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a2c:	d002      	beq.n	8000a34 <FLASH_enWriteArray+0x68>
					!= 0xffffffff) {

				Local_state = FLASH_WRITTEN;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	75fb      	strb	r3, [r7, #23]
				break;
 8000a32:	e016      	b.n	8000a62 <FLASH_enWriteArray+0x96>
			} else {
				*(volatile u16*) (ptrAddress + (Local_Index * FLASH_WORD)) =
						Arr_u8Data[Local_Index];
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	4413      	add	r3, r2
				*(volatile u16*) (ptrAddress + (Local_Index * FLASH_WORD)) =
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	0051      	lsls	r1, r2, #1
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	440a      	add	r2, r1
						Arr_u8Data[Local_Index];
 8000a44:	881b      	ldrh	r3, [r3, #0]
				*(volatile u16*) (ptrAddress + (Local_Index * FLASH_WORD)) =
 8000a46:	8013      	strh	r3, [r2, #0]
			if (*(volatile u32*) (ptrAddress + (Local_Index * FLASH_WORD))
 8000a48:	e002      	b.n	8000a50 <FLASH_enWriteArray+0x84>
			}

		} else {

			//out of range
			Local_state = FLASH_OUTOFRANGE;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	75fb      	strb	r3, [r7, #23]
			break;
 8000a4e:	e008      	b.n	8000a62 <FLASH_enWriteArray+0x96>
		}
		FLASH_enWaitClr();         // wait and clr
 8000a50:	f7ff ff16 	bl	8000880 <FLASH_enWaitClr>
	for (u32 Local_Index = 0; Local_Index < Copy_Size; Local_Index++) {
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	3301      	adds	r3, #1
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d3cc      	bcc.n	80009fc <FLASH_enWriteArray+0x30>

	}
	FlASH_enDisablePrograming(); // close prog session
 8000a62:	f000 f81b 	bl	8000a9c <FlASH_enDisablePrograming>

	return Local_state;
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	0807ffff 	.word	0x0807ffff

08000a74 <FlASH_enEnablePrograming>:

// enable flash programming by set PG bit
FLASH_enERR_T FlASH_enEnablePrograming() {
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
	FLASH_enERR_T Local_state = FLASH_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(FLASH->FLASH_CR, CR_PG);
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <FlASH_enEnablePrograming+0x24>)
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <FlASH_enEnablePrograming+0x24>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6113      	str	r3, [r2, #16]
	return Local_state;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40022000 	.word	0x40022000

08000a9c <FlASH_enDisablePrograming>:

// disable flash programming by set PG bit
FLASH_enERR_T FlASH_enDisablePrograming() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
	FLASH_enERR_T Local_state = FLASH_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(FLASH->FLASH_CR, CR_PG);
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <FlASH_enDisablePrograming+0x24>)
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <FlASH_enDisablePrograming+0x24>)
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	6113      	str	r3, [r2, #16]
	return Local_state;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <FLASH_enUnlock>:

FLASH_enERR_T FLASH_enUnlock() {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
	FLASH_enERR_T Local_state = FLASH_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	71fb      	strb	r3, [r7, #7]
	u8 local_FlashLockStatus = READ_BIT(FLASH->FLASH_CR, CR_LOCK);
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <FLASH_enUnlock+0x54>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	09db      	lsrs	r3, r3, #7
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	71bb      	strb	r3, [r7, #6]
	if (local_FlashLockStatus == 1) // flash is locked
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d105      	bne.n	8000aee <FLASH_enUnlock+0x2a>
			{
		// unlock sequance
		FLASH->FLASH_KEYR = FLASH_KEY1;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <FLASH_enUnlock+0x54>)
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <FLASH_enUnlock+0x58>)
 8000ae6:	605a      	str	r2, [r3, #4]
		FLASH->FLASH_KEYR = FLASH_KEY2;
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <FLASH_enUnlock+0x54>)
 8000aea:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <FLASH_enUnlock+0x5c>)
 8000aec:	605a      	str	r2, [r3, #4]

	} else {
		//dp noting
	}
	 local_FlashLockStatus = READ_BIT(FLASH->FLASH_CR, CR_LOCK);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <FLASH_enUnlock+0x54>)
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	09db      	lsrs	r3, r3, #7
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	71bb      	strb	r3, [r7, #6]

	if (local_FlashLockStatus == 1) {
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d102      	bne.n	8000b08 <FLASH_enUnlock+0x44>

		Local_state = FLASH_UNLOCKERR;
 8000b02:	2303      	movs	r3, #3
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	e001      	b.n	8000b0c <FLASH_enUnlock+0x48>
	} else {

		Local_state = FLASH_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	71fb      	strb	r3, [r7, #7]

	}
	return Local_state;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40022000 	.word	0x40022000
 8000b1c:	45670123 	.word	0x45670123
 8000b20:	cdef89ab 	.word	0xcdef89ab

08000b24 <FLASH_enlock>:

FLASH_enERR_T FLASH_enlock() {
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
	FLASH_enERR_T Local_state = FLASH_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]

	SET_BIT(FLASH->FLASH_CR, CR_LOCK); // lock flash
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <FLASH_enlock+0x24>)
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <FLASH_enlock+0x24>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	6113      	str	r3, [r2, #16]

	return Local_state;
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40022000 	.word	0x40022000

08000b4c <GPIO_u8Init>:
#include "GPIO_Private.h"
#include "GPIO_Interface.h"

extern GPIO_Conf_t GPIO_Conf_ARR[PINTOTAL];

Error_t GPIO_u8Init() {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

	for (u8 index = 0; index < PINTOTAL; index++) {
 8000b52:	2300      	movs	r3, #0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	e00f      	b.n	8000b78 <GPIO_u8Init+0x2c>
		GPIO_u8SetPinD_ID(GPIO_Conf_ARR[index].GPIO_u8_pin,
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <GPIO_u8Init+0x3c>)
 8000b5c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4909      	ldr	r1, [pc, #36]	; (8000b88 <GPIO_u8Init+0x3c>)
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	440b      	add	r3, r1
 8000b68:	785b      	ldrb	r3, [r3, #1]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	f000 f829 	bl	8000bc4 <GPIO_u8SetPinD_ID>
	for (u8 index = 0; index < PINTOTAL; index++) {
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	3301      	adds	r3, #1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b2f      	cmp	r3, #47	; 0x2f
 8000b7c:	d9ec      	bls.n	8000b58 <GPIO_u8Init+0xc>
				GPIO_Conf_ARR[index].GPIO_u8_Mode);
	}
	return OK;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	08001828 	.word	0x08001828

08000b8c <GPIO_u8DeInit>:
Error_t GPIO_u8DeInit() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

	for (u8 index = 0; index < PINTOTAL; index++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	71fb      	strb	r3, [r7, #7]
 8000b96:	e00a      	b.n	8000bae <GPIO_u8DeInit+0x22>
		GPIO_u8SetPinV_ID(GPIO_Conf_ARR[index].GPIO_u8_pin,
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <GPIO_u8DeInit+0x34>)
 8000b9c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f8ec 	bl	8000d80 <GPIO_u8SetPinV_ID>
	for (u8 index = 0; index < PINTOTAL; index++) {
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	3301      	adds	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b2f      	cmp	r3, #47	; 0x2f
 8000bb2:	d9f1      	bls.n	8000b98 <GPIO_u8DeInit+0xc>
				LOW);
	}
	return OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08001828 	.word	0x08001828

08000bc4 <GPIO_u8SetPinD_ID>:
		local_state = NOK;
		break;
	}
	return local_state;
}
Error_t GPIO_u8SetPinD_ID(GPIO_u8PIN_t Copy_u8PinId, u8 Copy_u8Mode) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	460a      	mov	r2, r1
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	71bb      	strb	r3, [r7, #6]
	u8 local_port = (Copy_u8PinId / GPIO_u8R_PINS) + 1;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	3301      	adds	r3, #1
 8000bdc:	73bb      	strb	r3, [r7, #14]
	u8 local_pin = Copy_u8PinId % GPIO_u8R_PINS;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	737b      	strb	r3, [r7, #13]
	Error_t local_state = OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]
	switch (local_port) {
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d07d      	beq.n	8000cec <GPIO_u8SetPinD_ID+0x128>
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	f300 80b6 	bgt.w	8000d62 <GPIO_u8SetPinD_ID+0x19e>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d002      	beq.n	8000c00 <GPIO_u8SetPinD_ID+0x3c>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d03b      	beq.n	8000c76 <GPIO_u8SetPinD_ID+0xb2>
 8000bfe:	e0b0      	b.n	8000d62 <GPIO_u8SetPinD_ID+0x19e>
	case GPIO_PORTA:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 8000c00:	7b7b      	ldrb	r3, [r7, #13]
 8000c02:	2b07      	cmp	r3, #7
 8000c04:	d817      	bhi.n	8000c36 <GPIO_u8SetPinD_ID+0x72>
			GPIO_A->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000c06:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <GPIO_u8SetPinD_ID+0x1b0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000c0a:	7b7a      	ldrb	r2, [r7, #13]
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	210f      	movs	r1, #15
 8000c10:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_A->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000c14:	43d2      	mvns	r2, r2
 8000c16:	4611      	mov	r1, r2
 8000c18:	4a56      	ldr	r2, [pc, #344]	; (8000d74 <GPIO_u8SetPinD_ID+0x1b0>)
 8000c1a:	400b      	ands	r3, r1
 8000c1c:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRL |= ((Copy_u8Mode)
 8000c1e:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <GPIO_u8SetPinD_ID+0x1b0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000c22:	79b9      	ldrb	r1, [r7, #6]
 8000c24:	7b7a      	ldrb	r2, [r7, #13]
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	4611      	mov	r1, r2
			GPIO_A->GPIO_CRL |= ((Copy_u8Mode)
 8000c2e:	4a51      	ldr	r2, [pc, #324]	; (8000d74 <GPIO_u8SetPinD_ID+0x1b0>)
 8000c30:	430b      	orrs	r3, r1
 8000c32:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 8000c34:	e098      	b.n	8000d68 <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 8000c36:	7b7b      	ldrb	r3, [r7, #13]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d819      	bhi.n	8000c70 <GPIO_u8SetPinD_ID+0xac>
			GPIO_A->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000c3c:	4b4d      	ldr	r3, [pc, #308]	; (8000d74 <GPIO_u8SetPinD_ID+0x1b0>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000c40:	7b7a      	ldrb	r2, [r7, #13]
 8000c42:	3a08      	subs	r2, #8
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	210f      	movs	r1, #15
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_A->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000c4c:	43d2      	mvns	r2, r2
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <GPIO_u8SetPinD_ID+0x1b0>)
 8000c52:	400b      	ands	r3, r1
 8000c54:	6053      	str	r3, [r2, #4]
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
 8000c56:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <GPIO_u8SetPinD_ID+0x1b0>)
 8000c58:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000c5a:	79b9      	ldrb	r1, [r7, #6]
 8000c5c:	7b7a      	ldrb	r2, [r7, #13]
 8000c5e:	3a08      	subs	r2, #8
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	fa01 f202 	lsl.w	r2, r1, r2
 8000c66:	4611      	mov	r1, r2
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
 8000c68:	4a42      	ldr	r2, [pc, #264]	; (8000d74 <GPIO_u8SetPinD_ID+0x1b0>)
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	6053      	str	r3, [r2, #4]
		break;
 8000c6e:	e07b      	b.n	8000d68 <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
		break;
 8000c74:	e078      	b.n	8000d68 <GPIO_u8SetPinD_ID+0x1a4>
	case GPIO_PORTB:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 8000c76:	7b7b      	ldrb	r3, [r7, #13]
 8000c78:	2b07      	cmp	r3, #7
 8000c7a:	d817      	bhi.n	8000cac <GPIO_u8SetPinD_ID+0xe8>
			GPIO_B->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <GPIO_u8SetPinD_ID+0x1b4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000c80:	7b7a      	ldrb	r2, [r7, #13]
 8000c82:	0092      	lsls	r2, r2, #2
 8000c84:	210f      	movs	r1, #15
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_B->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000c8a:	43d2      	mvns	r2, r2
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4a3a      	ldr	r2, [pc, #232]	; (8000d78 <GPIO_u8SetPinD_ID+0x1b4>)
 8000c90:	400b      	ands	r3, r1
 8000c92:	6013      	str	r3, [r2, #0]
			GPIO_B->GPIO_CRL |= ((Copy_u8Mode)
 8000c94:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <GPIO_u8SetPinD_ID+0x1b4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000c98:	79b9      	ldrb	r1, [r7, #6]
 8000c9a:	7b7a      	ldrb	r2, [r7, #13]
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	4611      	mov	r1, r2
			GPIO_B->GPIO_CRL |= ((Copy_u8Mode)
 8000ca4:	4a34      	ldr	r2, [pc, #208]	; (8000d78 <GPIO_u8SetPinD_ID+0x1b4>)
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	6013      	str	r3, [r2, #0]
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 8000caa:	e05d      	b.n	8000d68 <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 8000cac:	7b7b      	ldrb	r3, [r7, #13]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d819      	bhi.n	8000ce6 <GPIO_u8SetPinD_ID+0x122>
			GPIO_B->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <GPIO_u8SetPinD_ID+0x1b4>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000cb6:	7b7a      	ldrb	r2, [r7, #13]
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	210f      	movs	r1, #15
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_B->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000cc2:	43d2      	mvns	r2, r2
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4a2c      	ldr	r2, [pc, #176]	; (8000d78 <GPIO_u8SetPinD_ID+0x1b4>)
 8000cc8:	400b      	ands	r3, r1
 8000cca:	6053      	str	r3, [r2, #4]
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <GPIO_u8SetPinD_ID+0x1b4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000cd0:	79b9      	ldrb	r1, [r7, #6]
 8000cd2:	7b7a      	ldrb	r2, [r7, #13]
 8000cd4:	3a08      	subs	r2, #8
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	4611      	mov	r1, r2
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
 8000cde:	4a26      	ldr	r2, [pc, #152]	; (8000d78 <GPIO_u8SetPinD_ID+0x1b4>)
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6053      	str	r3, [r2, #4]
		break;
 8000ce4:	e040      	b.n	8000d68 <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
		break;
 8000cea:	e03d      	b.n	8000d68 <GPIO_u8SetPinD_ID+0x1a4>
	case GPIO_PORTC:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 8000cec:	7b7b      	ldrb	r3, [r7, #13]
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d817      	bhi.n	8000d22 <GPIO_u8SetPinD_ID+0x15e>
			GPIO_C->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <GPIO_u8SetPinD_ID+0x1b8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000cf6:	7b7a      	ldrb	r2, [r7, #13]
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_C->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	4611      	mov	r1, r2
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <GPIO_u8SetPinD_ID+0x1b8>)
 8000d06:	400b      	ands	r3, r1
 8000d08:	6013      	str	r3, [r2, #0]
			GPIO_C->GPIO_CRL |= ((Copy_u8Mode)
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <GPIO_u8SetPinD_ID+0x1b8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000d0e:	79b9      	ldrb	r1, [r7, #6]
 8000d10:	7b7a      	ldrb	r2, [r7, #13]
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	4611      	mov	r1, r2
			GPIO_C->GPIO_CRL |= ((Copy_u8Mode)
 8000d1a:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <GPIO_u8SetPinD_ID+0x1b8>)
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	6013      	str	r3, [r2, #0]
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 8000d20:	e022      	b.n	8000d68 <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d819      	bhi.n	8000d5c <GPIO_u8SetPinD_ID+0x198>
			GPIO_C->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <GPIO_u8SetPinD_ID+0x1b8>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000d2c:	7b7a      	ldrb	r2, [r7, #13]
 8000d2e:	3a08      	subs	r2, #8
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	210f      	movs	r1, #15
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_C->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000d38:	43d2      	mvns	r2, r2
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <GPIO_u8SetPinD_ID+0x1b8>)
 8000d3e:	400b      	ands	r3, r1
 8000d40:	6053      	str	r3, [r2, #4]
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <GPIO_u8SetPinD_ID+0x1b8>)
 8000d44:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000d46:	79b9      	ldrb	r1, [r7, #6]
 8000d48:	7b7a      	ldrb	r2, [r7, #13]
 8000d4a:	3a08      	subs	r2, #8
 8000d4c:	0092      	lsls	r2, r2, #2
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	4611      	mov	r1, r2
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <GPIO_u8SetPinD_ID+0x1b8>)
 8000d56:	430b      	orrs	r3, r1
 8000d58:	6053      	str	r3, [r2, #4]
		break;
 8000d5a:	e005      	b.n	8000d68 <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d60:	e002      	b.n	8000d68 <GPIO_u8SetPinD_ID+0x1a4>
	default:
		local_state = NOK;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
		break;
 8000d66:	bf00      	nop
	}

	return local_state;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40010800 	.word	0x40010800
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40011000 	.word	0x40011000

08000d80 <GPIO_u8SetPinV_ID>:
Error_t GPIO_u8SetPinV_ID(GPIO_u8PIN_t Copy_u8PinId, u8 Copy_u8Value) {
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	71bb      	strb	r3, [r7, #6]
	u8 local_port = (Copy_u8PinId / GPIO_u8R_PINS) + 1;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	091b      	lsrs	r3, r3, #4
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	3301      	adds	r3, #1
 8000d98:	73bb      	strb	r3, [r7, #14]
	u8 local_pin = Copy_u8PinId % GPIO_u8R_PINS;
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 030f 	and.w	r3, r3, #15
 8000da0:	737b      	strb	r3, [r7, #13]
	Error_t local_state = OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
	switch (local_port) {
 8000da6:	7bbb      	ldrb	r3, [r7, #14]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d028      	beq.n	8000dfe <GPIO_u8SetPinV_ID+0x7e>
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	dc37      	bgt.n	8000e20 <GPIO_u8SetPinV_ID+0xa0>
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d002      	beq.n	8000dba <GPIO_u8SetPinV_ID+0x3a>
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d011      	beq.n	8000ddc <GPIO_u8SetPinV_ID+0x5c>
 8000db8:	e032      	b.n	8000e20 <GPIO_u8SetPinV_ID+0xa0>
	case GPIO_PORTA:
		WRITE_BIT(GPIO_A->GPIO_ODR, local_pin, Copy_u8Value);
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <GPIO_u8SetPinV_ID+0xb4>)
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	7b7a      	ldrb	r2, [r7, #13]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	43d2      	mvns	r2, r2
 8000dc8:	4013      	ands	r3, r2
 8000dca:	79b9      	ldrb	r1, [r7, #6]
 8000dcc:	7b7a      	ldrb	r2, [r7, #13]
 8000dce:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <GPIO_u8SetPinV_ID+0xb4>)
 8000dd6:	430b      	orrs	r3, r1
 8000dd8:	60d3      	str	r3, [r2, #12]
		break;
 8000dda:	e024      	b.n	8000e26 <GPIO_u8SetPinV_ID+0xa6>
	case GPIO_PORTB:
		WRITE_BIT(GPIO_B->GPIO_ODR, local_pin, Copy_u8Value);
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <GPIO_u8SetPinV_ID+0xb8>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	7b7a      	ldrb	r2, [r7, #13]
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	43d2      	mvns	r2, r2
 8000dea:	4013      	ands	r3, r2
 8000dec:	79b9      	ldrb	r1, [r7, #6]
 8000dee:	7b7a      	ldrb	r2, [r7, #13]
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	4611      	mov	r1, r2
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <GPIO_u8SetPinV_ID+0xb8>)
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	60d3      	str	r3, [r2, #12]
		break;
 8000dfc:	e013      	b.n	8000e26 <GPIO_u8SetPinV_ID+0xa6>
	case GPIO_PORTC:
		WRITE_BIT(GPIO_C->GPIO_ODR, local_pin, Copy_u8Value);
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <GPIO_u8SetPinV_ID+0xbc>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	7b7a      	ldrb	r2, [r7, #13]
 8000e04:	2101      	movs	r1, #1
 8000e06:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0a:	43d2      	mvns	r2, r2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	79b9      	ldrb	r1, [r7, #6]
 8000e10:	7b7a      	ldrb	r2, [r7, #13]
 8000e12:	fa01 f202 	lsl.w	r2, r1, r2
 8000e16:	4611      	mov	r1, r2
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <GPIO_u8SetPinV_ID+0xbc>)
 8000e1a:	430b      	orrs	r3, r1
 8000e1c:	60d3      	str	r3, [r2, #12]
		break;
 8000e1e:	e002      	b.n	8000e26 <GPIO_u8SetPinV_ID+0xa6>
	default:
		local_state = NOK;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
		break;
 8000e24:	bf00      	nop
	}

	return local_state;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40010800 	.word	0x40010800
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	40011000 	.word	0x40011000

08000e40 <HEX_voidParseFrame>:
#include "HexServ_Private.h"

// this function parsing data
void HEX_voidParseFrame(u8 *Array_u8RecivedArray, u16 *ptr_u16ReturnAddress,
		u8 *ptr_u8Data, u8 *ptr_u8SizeData, u8 *ptr_u8checkSum,
		u8 *ptr_u8DataType) {
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]

	u8 local_u8index = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	75fb      	strb	r3, [r7, #23]

	*ptr_u8SizeData = Array_u8RecivedArray[HEX_RECORD_LEN_POS];   // data size
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	701a      	strb	r2, [r3, #0]
	*ptr_u16ReturnAddress = (u16) Array_u8RecivedArray[HEX_RECORD_ADDRES_POS]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	781b      	ldrb	r3, [r3, #0]
			<< 8 | Array_u8RecivedArray[HEX_RECORD_ADDRES_POS + 1];   // address
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	3302      	adds	r3, #2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	b29a      	uxth	r2, r3
	*ptr_u16ReturnAddress = (u16) Array_u8RecivedArray[HEX_RECORD_ADDRES_POS]
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	801a      	strh	r2, [r3, #0]
	*ptr_u8DataType = Array_u8RecivedArray[HEX_RECORD_TYPE_POS];    // data type
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	78da      	ldrb	r2, [r3, #3]
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	701a      	strb	r2, [r3, #0]
	for (local_u8index = 0; local_u8index < *ptr_u8SizeData; local_u8index++) { // data array
 8000e7e:	2300      	movs	r3, #0
 8000e80:	75fb      	strb	r3, [r7, #23]
 8000e82:	e00c      	b.n	8000e9e <HEX_voidParseFrame+0x5e>
		ptr_u8Data[local_u8index] = Array_u8RecivedArray[HEX_RECORD_DATA_POS
				+ local_u8index];
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	3304      	adds	r3, #4
 8000e88:	461a      	mov	r2, r3
		ptr_u8Data[local_u8index] = Array_u8RecivedArray[HEX_RECORD_DATA_POS
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	441a      	add	r2, r3
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	440b      	add	r3, r1
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	701a      	strb	r2, [r3, #0]
	for (local_u8index = 0; local_u8index < *ptr_u8SizeData; local_u8index++) { // data array
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	7dfa      	ldrb	r2, [r7, #23]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d3ed      	bcc.n	8000e84 <HEX_voidParseFrame+0x44>

	}
	for (; local_u8index < HEX_LINE_MAX; local_u8index++) { // fill array
 8000ea8:	e007      	b.n	8000eba <HEX_voidParseFrame+0x7a>
		ptr_u8Data[local_u8index] = 0;
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
	for (; local_u8index < HEX_LINE_MAX; local_u8index++) { // fill array
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	75fb      	strb	r3, [r7, #23]
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d9f4      	bls.n	8000eaa <HEX_voidParseFrame+0x6a>
	}
	*ptr_u8checkSum = Array_u8RecivedArray[HEX_RECORD_CKECKSUM_POS(
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	701a      	strb	r2, [r3, #0]
			*ptr_u8SizeData)];
}
 8000ed2:	bf00      	nop
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <RedesignHex1Bytes>:




}
void RedesignHex1Bytes(u8 *CopyStringHex, u8 *OutArray, u8 Copy_u8Size) {
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	u16 Local_temp0 = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	82bb      	strh	r3, [r7, #20]

	u8 Local_index = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75fb      	strb	r3, [r7, #23]

	for (Local_index = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	75fb      	strb	r3, [r7, #23]
 8000ef6:	e077      	b.n	8000fe8 <RedesignHex1Bytes+0x10c>
			Local_index < Copy_u8Size && CopyStringHex[(Local_index * 2)];
			Local_index++) {

		for (u8 Local_index1 = 0; Local_index1 < 2; Local_index1++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	75bb      	strb	r3, [r7, #22]
 8000efc:	e04f      	b.n	8000f9e <RedesignHex1Bytes+0xc2>
			if ((CopyStringHex[(Local_index * 2) + Local_index1]) >= '0'
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	005a      	lsls	r2, r3, #1
 8000f02:	7dbb      	ldrb	r3, [r7, #22]
 8000f04:	4413      	add	r3, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b2f      	cmp	r3, #47	; 0x2f
 8000f10:	d91c      	bls.n	8000f4c <RedesignHex1Bytes+0x70>
					&& (CopyStringHex[(Local_index * 2) + Local_index1])
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	005a      	lsls	r2, r3, #1
 8000f16:	7dbb      	ldrb	r3, [r7, #22]
 8000f18:	4413      	add	r3, r2
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b39      	cmp	r3, #57	; 0x39
 8000f24:	d812      	bhi.n	8000f4c <RedesignHex1Bytes+0x70>
							<= '9') {
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
						(CopyStringHex[(Local_index * 2) + Local_index1]) - '0';
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	005a      	lsls	r2, r3, #1
 8000f2a:	7dbb      	ldrb	r3, [r7, #22]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	781a      	ldrb	r2, [r3, #0]
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8000f36:	7dfb      	ldrb	r3, [r7, #23]
 8000f38:	0059      	lsls	r1, r3, #1
 8000f3a:	7dbb      	ldrb	r3, [r7, #22]
 8000f3c:	440b      	add	r3, r1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	440b      	add	r3, r1
						(CopyStringHex[(Local_index * 2) + Local_index1]) - '0';
 8000f44:	3a30      	subs	r2, #48	; 0x30
 8000f46:	b2d2      	uxtb	r2, r2
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e025      	b.n	8000f98 <RedesignHex1Bytes+0xbc>
			} else if ((CopyStringHex[(Local_index * 2) + Local_index1]) >= 'A'
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	005a      	lsls	r2, r3, #1
 8000f50:	7dbb      	ldrb	r3, [r7, #22]
 8000f52:	4413      	add	r3, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b40      	cmp	r3, #64	; 0x40
 8000f5e:	d91b      	bls.n	8000f98 <RedesignHex1Bytes+0xbc>
					&& (CopyStringHex[(Local_index * 2) + Local_index1])
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	005a      	lsls	r2, r3, #1
 8000f64:	7dbb      	ldrb	r3, [r7, #22]
 8000f66:	4413      	add	r3, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b46      	cmp	r3, #70	; 0x46
 8000f72:	d811      	bhi.n	8000f98 <RedesignHex1Bytes+0xbc>
							<= 'F') {
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
						((CopyStringHex[(Local_index * 2) + Local_index1]) - 'A')
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	005a      	lsls	r2, r3, #1
 8000f78:	7dbb      	ldrb	r3, [r7, #22]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	781a      	ldrb	r2, [r3, #0]
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	0059      	lsls	r1, r3, #1
 8000f88:	7dbb      	ldrb	r3, [r7, #22]
 8000f8a:	440b      	add	r3, r1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	440b      	add	r3, r1
								+ 10;
 8000f92:	3a37      	subs	r2, #55	; 0x37
 8000f94:	b2d2      	uxtb	r2, r2
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8000f96:	701a      	strb	r2, [r3, #0]
		for (u8 Local_index1 = 0; Local_index1 < 2; Local_index1++) {
 8000f98:	7dbb      	ldrb	r3, [r7, #22]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	75bb      	strb	r3, [r7, #22]
 8000f9e:	7dbb      	ldrb	r3, [r7, #22]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d9ac      	bls.n	8000efe <RedesignHex1Bytes+0x22>

			} else {
				//do nothing
			}
		}
		Local_temp0 = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	82bb      	strh	r3, [r7, #20]

		Local_temp0 = ((CopyStringHex[(Local_index * 2)] & 0x0f) << 4)
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	461a      	mov	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	b21a      	sxth	r2, r3
				| (CopyStringHex[(Local_index * 2) + 1] & 0x0f);
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21b      	sxth	r3, r3
		Local_temp0 = ((CopyStringHex[(Local_index * 2)] & 0x0f) << 4)
 8000fd4:	82bb      	strh	r3, [r7, #20]
		/*(((CopyStringHex[(Local_index * 4) + 3])) & 0x0f)
		 | ((((CopyStringHex[(Local_index * 4) + 2])) & 0x0f) << 4);
		 Local_temp1 = (((CopyStringHex[(Local_index * 4) + 1])) & 0x0f)
		 | ((((CopyStringHex[Local_index * 4])) & 0x0f) << 4);
		 */
		OutArray[Local_index] = Local_temp0;
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	4413      	add	r3, r2
 8000fdc:	8aba      	ldrh	r2, [r7, #20]
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	701a      	strb	r2, [r3, #0]
			Local_index++) {
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	75fb      	strb	r3, [r7, #23]
			Local_index < Copy_u8Size && CopyStringHex[(Local_index * 2)];
 8000fe8:	7dfa      	ldrb	r2, [r7, #23]
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d211      	bcs.n	8001014 <RedesignHex1Bytes+0x138>
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f47f af7b 	bne.w	8000ef8 <RedesignHex1Bytes+0x1c>
		//	UART1_u8SendNumString(OutArray[Local_index]);

		//	UART1_u8SendStringBusyW8("\n");

	}
	for (; Local_index < Copy_u8Size; Local_index++) {
 8001002:	e007      	b.n	8001014 <RedesignHex1Bytes+0x138>
		OutArray[Local_index] = 0;
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	4413      	add	r3, r2
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	for (; Local_index < Copy_u8Size; Local_index++) {
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	3301      	adds	r3, #1
 8001012:	75fb      	strb	r3, [r7, #23]
 8001014:	7dfa      	ldrb	r2, [r7, #23]
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	429a      	cmp	r2, r3
 800101a:	d3f3      	bcc.n	8001004 <RedesignHex1Bytes+0x128>
	}

}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	371c      	adds	r7, #28
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <DataCeckSum>:

u8 DataCeckSum(u8 *ptrArraySum, u8 Copy_u8Size, u8 Copy_u8Checksum) {
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
 8001034:	4613      	mov	r3, r2
 8001036:	70bb      	strb	r3, [r7, #2]
	u16 localSum = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	81fb      	strh	r3, [r7, #14]
	for (u8 local_index; local_index < Copy_u8Size; local_index++) {
 800103c:	e00a      	b.n	8001054 <DataCeckSum+0x2c>
		localSum += ptrArraySum[local_index];
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b29a      	uxth	r2, r3
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	4413      	add	r3, r2
 800104c:	81fb      	strh	r3, [r7, #14]
	for (u8 local_index; local_index < Copy_u8Size; local_index++) {
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	3301      	adds	r3, #1
 8001052:	737b      	strb	r3, [r7, #13]
 8001054:	7b7a      	ldrb	r2, [r7, #13]
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	429a      	cmp	r2, r3
 800105a:	d3f0      	bcc.n	800103e <DataCeckSum+0x16>
	}
	u16 data = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	817b      	strh	r3, [r7, #10]
	data = localSum - Copy_u8Checksum;
 8001060:	78bb      	ldrb	r3, [r7, #2]
 8001062:	b29b      	uxth	r3, r3
 8001064:	89fa      	ldrh	r2, [r7, #14]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	817b      	strh	r3, [r7, #10]
	data = ((u8) (~(data & 0x00ff))) + 1;
 800106a:	897b      	ldrh	r3, [r7, #10]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	3301      	adds	r3, #1
 8001076:	817b      	strh	r3, [r7, #10]
	return (u8) data;
 8001078:	897b      	ldrh	r3, [r7, #10]
 800107a:	b2db      	uxtb	r3, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
	...

08001088 <NVIC_u8Set_EN_IRQ>:
	SCB->AIRCR = NVIC_PR_OPTIONS;

	return OK;
}

Error_t NVIC_u8Set_EN_IRQ(NVIC_Prority_t Copy_IRQ_ID) {
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	Error_t Copy_status = OK;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]
	u8 Copy_ID_Index = Copy_IRQ_ID / NVIC_REG_SIZE;
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	73bb      	strb	r3, [r7, #14]
	if (Copy_IRQ_ID < INTERRUPT_TOTAL) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b3b      	cmp	r3, #59	; 0x3b
 80010a0:	d80c      	bhi.n	80010bc <NVIC_u8Set_EN_IRQ+0x34>
		Copy_IRQ_ID = Copy_IRQ_ID % NVIC_REG_SIZE;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[Copy_ID_Index] = 1 << Copy_IRQ_ID;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2201      	movs	r2, #1
 80010ae:	fa02 f103 	lsl.w	r1, r2, r3
 80010b2:	4a06      	ldr	r2, [pc, #24]	; (80010cc <NVIC_u8Set_EN_IRQ+0x44>)
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80010ba:	e001      	b.n	80010c0 <NVIC_u8Set_EN_IRQ+0x38>
	} else {
		Copy_status = NOK;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
	}
	return Copy_status;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <RCC_voidInitSystemClock>:
#include "RCC_Private.h"
#include "RCC_CONF.h"
#include "RCC_Interface.h"

void RCC_voidInitSystemClock(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
#if RCC_u8CLK_TYPE==RCC_u8HSE_CRYSTAL
	RCC->RCC_CR=0x00010080;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <RCC_voidInitSystemClock+0x14>)
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <RCC_voidInitSystemClock+0x18>)
 80010d8:	601a      	str	r2, [r3, #0]
	RCC->RCC_CR = 0x00010080;
#else
	#error("You choosed wrong Clock Type")
#endif

}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	00010080 	.word	0x00010080

080010ec <RCC_voidEnablePeriphralCLK>:

Error_t RCC_voidEnablePeriphralCLK(PeriphralBusId_t Copy_enPeriphralId)
{	
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8BusID =Copy_enPeriphralId/100;
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4a25      	ldr	r2, [pc, #148]	; (8001190 <RCC_voidEnablePeriphralCLK+0xa4>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	b29b      	uxth	r3, r3
 8001102:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8PeriphralID =Copy_enPeriphralId % 100;
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	4a22      	ldr	r2, [pc, #136]	; (8001190 <RCC_voidEnablePeriphralCLK+0xa4>)
 8001108:	fba2 1203 	umull	r1, r2, r2, r3
 800110c:	0952      	lsrs	r2, r2, #5
 800110e:	2164      	movs	r1, #100	; 0x64
 8001110:	fb01 f202 	mul.w	r2, r1, r2
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	b29b      	uxth	r3, r3
 8001118:	737b      	strb	r3, [r7, #13]

	Error_t Local_enErrorState=OK;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]

	if(Local_u8PeriphralID  <= 31) //unsigned
 800111e:	7b7b      	ldrb	r3, [r7, #13]
 8001120:	2b1f      	cmp	r3, #31
 8001122:	d82d      	bhi.n	8001180 <RCC_voidEnablePeriphralCLK+0x94>
	{
		switch(Local_u8BusID)
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d01c      	beq.n	8001164 <RCC_voidEnablePeriphralCLK+0x78>
 800112a:	2b03      	cmp	r3, #3
 800112c:	dc25      	bgt.n	800117a <RCC_voidEnablePeriphralCLK+0x8e>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d002      	beq.n	8001138 <RCC_voidEnablePeriphralCLK+0x4c>
 8001132:	2b02      	cmp	r3, #2
 8001134:	d00b      	beq.n	800114e <RCC_voidEnablePeriphralCLK+0x62>
 8001136:	e020      	b.n	800117a <RCC_voidEnablePeriphralCLK+0x8e>
		{
		case RCC_u8AHB: SET_BIT(RCC->RCC_AHBENR,Local_u8PeriphralID) ;    	
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <RCC_voidEnablePeriphralCLK+0xa8>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	7b7a      	ldrb	r2, [r7, #13]
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	4611      	mov	r1, r2
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <RCC_voidEnablePeriphralCLK+0xa8>)
 8001148:	430b      	orrs	r3, r1
 800114a:	6153      	str	r3, [r2, #20]
			break;
 800114c:	e01a      	b.n	8001184 <RCC_voidEnablePeriphralCLK+0x98>

		case RCC_u8APB2:SET_BIT(RCC->RCC_APB2ENR,Local_u8PeriphralID) ;	
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <RCC_voidEnablePeriphralCLK+0xa8>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	7b7a      	ldrb	r2, [r7, #13]
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	4611      	mov	r1, r2
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <RCC_voidEnablePeriphralCLK+0xa8>)
 800115e:	430b      	orrs	r3, r1
 8001160:	6193      	str	r3, [r2, #24]
			break;
 8001162:	e00f      	b.n	8001184 <RCC_voidEnablePeriphralCLK+0x98>

		case RCC_u8APB1: SET_BIT(RCC->RCC_APB1ENR,Local_u8PeriphralID) ;	
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <RCC_voidEnablePeriphralCLK+0xa8>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	7b7a      	ldrb	r2, [r7, #13]
 800116a:	2101      	movs	r1, #1
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	4611      	mov	r1, r2
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <RCC_voidEnablePeriphralCLK+0xa8>)
 8001174:	430b      	orrs	r3, r1
 8001176:	61d3      	str	r3, [r2, #28]
			break;
 8001178:	e004      	b.n	8001184 <RCC_voidEnablePeriphralCLK+0x98>
			
			
			
		default:
			Local_enErrorState=NOK;
 800117a:	2301      	movs	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
			break;
 800117e:	e001      	b.n	8001184 <RCC_voidEnablePeriphralCLK+0x98>
		}

	}
	else
	{
		Local_enErrorState=NOK;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]

	}

	return Local_enErrorState;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	51eb851f 	.word	0x51eb851f
 8001194:	40021000 	.word	0x40021000

08001198 <RCC_voidDisablePeriphralCLK>:

Error_t RCC_voidDisablePeriphralCLK(PeriphralBusId_t Copy_enPeriphralId)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]

	u8 Local_u8BusID =Copy_enPeriphralId/100;
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <RCC_voidDisablePeriphralCLK+0xac>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8PeriphralID =Copy_enPeriphralId % 100;
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4a24      	ldr	r2, [pc, #144]	; (8001244 <RCC_voidDisablePeriphralCLK+0xac>)
 80011b4:	fba2 1203 	umull	r1, r2, r2, r3
 80011b8:	0952      	lsrs	r2, r2, #5
 80011ba:	2164      	movs	r1, #100	; 0x64
 80011bc:	fb01 f202 	mul.w	r2, r1, r2
 80011c0:	1a9b      	subs	r3, r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	737b      	strb	r3, [r7, #13]
	Error_t Local_enErrorState=OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
	if(Local_u8PeriphralID <= 31) //unsigned
 80011ca:	7b7b      	ldrb	r3, [r7, #13]
 80011cc:	2b1f      	cmp	r3, #31
 80011ce:	d830      	bhi.n	8001232 <RCC_voidDisablePeriphralCLK+0x9a>
	{
		switch(Local_u8BusID)
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d012      	beq.n	80011fc <RCC_voidDisablePeriphralCLK+0x64>
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	dc28      	bgt.n	800122c <RCC_voidDisablePeriphralCLK+0x94>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d002      	beq.n	80011e4 <RCC_voidDisablePeriphralCLK+0x4c>
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d018      	beq.n	8001214 <RCC_voidDisablePeriphralCLK+0x7c>
 80011e2:	e023      	b.n	800122c <RCC_voidDisablePeriphralCLK+0x94>
		{
		case RCC_u8AHB: CLR_BIT(RCC->RCC_AHBENR,Local_u8PeriphralID) ;    	
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <RCC_voidDisablePeriphralCLK+0xb0>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	7b7a      	ldrb	r2, [r7, #13]
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	43d2      	mvns	r2, r2
 80011f2:	4611      	mov	r1, r2
 80011f4:	4a14      	ldr	r2, [pc, #80]	; (8001248 <RCC_voidDisablePeriphralCLK+0xb0>)
 80011f6:	400b      	ands	r3, r1
 80011f8:	6153      	str	r3, [r2, #20]
			break;
 80011fa:	e01c      	b.n	8001236 <RCC_voidDisablePeriphralCLK+0x9e>

	case RCC_u8APB1:CLR_BIT(RCC->RCC_APB1ENR,Local_u8PeriphralID) ;	
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <RCC_voidDisablePeriphralCLK+0xb0>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	7b7a      	ldrb	r2, [r7, #13]
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	43d2      	mvns	r2, r2
 800120a:	4611      	mov	r1, r2
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <RCC_voidDisablePeriphralCLK+0xb0>)
 800120e:	400b      	ands	r3, r1
 8001210:	61d3      	str	r3, [r2, #28]
		break;
 8001212:	e010      	b.n	8001236 <RCC_voidDisablePeriphralCLK+0x9e>
		
	case RCC_u8APB2:CLR_BIT(RCC->RCC_APB2ENR,Local_u8PeriphralID) ;	
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <RCC_voidDisablePeriphralCLK+0xb0>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	7b7a      	ldrb	r2, [r7, #13]
 800121a:	2101      	movs	r1, #1
 800121c:	fa01 f202 	lsl.w	r2, r1, r2
 8001220:	43d2      	mvns	r2, r2
 8001222:	4611      	mov	r1, r2
 8001224:	4a08      	ldr	r2, [pc, #32]	; (8001248 <RCC_voidDisablePeriphralCLK+0xb0>)
 8001226:	400b      	ands	r3, r1
 8001228:	6193      	str	r3, [r2, #24]
		break;
 800122a:	e004      	b.n	8001236 <RCC_voidDisablePeriphralCLK+0x9e>
		
	default:
		Local_enErrorState=NOK;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
		break;
 8001230:	e001      	b.n	8001236 <RCC_voidDisablePeriphralCLK+0x9e>
	}

}
else
{
	Local_enErrorState=NOK;
 8001232:	2301      	movs	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]

}

return Local_enErrorState;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	51eb851f 	.word	0x51eb851f
 8001248:	40021000 	.word	0x40021000

0800124c <main>:
#include "../CRC/CRC_Interface.h"

#include "../Bootloader/Bootloader_Interface.h"
u32 dataget = 0;

int main(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	RCC_voidInitSystemClock();
 8001250:	f7ff ff3e 	bl	80010d0 <RCC_voidInitSystemClock>
	RCC_voidEnablePeriphralCLK(APB2_IOPAEN);
 8001254:	20ca      	movs	r0, #202	; 0xca
 8001256:	f7ff ff49 	bl	80010ec <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPBEN);
 800125a:	20cb      	movs	r0, #203	; 0xcb
 800125c:	f7ff ff46 	bl	80010ec <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPCEN);
 8001260:	20cc      	movs	r0, #204	; 0xcc
 8001262:	f7ff ff43 	bl	80010ec <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB1_USART2EN);
 8001266:	f240 103d 	movw	r0, #317	; 0x13d
 800126a:	f7ff ff3f 	bl	80010ec <RCC_voidEnablePeriphralCLK>
	//RCC_voidEnablePeriphralCLK(AHB_CRCEN);

	GPIO_u8Init();
 800126e:	f7ff fc6d 	bl	8000b4c <GPIO_u8Init>
	UART2_voidInit();
 8001272:	f000 fa4d 	bl	8001710 <UART2_voidInit>
	//UART1_voidInit();

	GPIO_u8SetPinV_ID(Pin_B1, LOW);
 8001276:	2100      	movs	r1, #0
 8001278:	2011      	movs	r0, #17
 800127a:	f7ff fd81 	bl	8000d80 <GPIO_u8SetPinV_ID>
	Bootloader_Init();
 800127e:	f7fe ff7f 	bl	8000180 <Bootloader_Init>
	//CRC_enuWriteDataRegister(0x11223344);
	//BootLocationEreas();
	while (1) {
#if 1
		static u8 datapin = 1;
		GPIO_u8SetPinV_ID(Pin_A5, datapin);
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <main+0x64>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	2005      	movs	r0, #5
 800128a:	f7ff fd79 	bl	8000d80 <GPIO_u8SetPinV_ID>
		Delay(100);
 800128e:	2064      	movs	r0, #100	; 0x64
 8001290:	f7ff faa2 	bl	80007d8 <Delay>
		datapin = !datapin;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <main+0x64>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <main+0x64>)
 80012a6:	701a      	strb	r2, [r3, #0]
		Bootloader_voidfRunnable();		//func();
 80012a8:	f7ff f918 	bl	80004dc <Bootloader_voidfRunnable>
	while (1) {
 80012ac:	e7e9      	b.n	8001282 <main+0x36>
 80012ae:	bf00      	nop
 80012b0:	20000003 	.word	0x20000003

080012b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <LoopForever+0xe>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	; (8001300 <LoopForever+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012e2:	f000 fa61 	bl	80017a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e6:	f7ff ffb1 	bl	800124c <main>

080012ea <LoopForever>:

LoopForever:
  b LoopForever
 80012ea:	e7fe      	b.n	80012ea <LoopForever>
  ldr   r0, =_estack
 80012ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80012f8:	08001890 	.word	0x08001890
  ldr r2, =_sbss
 80012fc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001300:	200000cc 	.word	0x200000cc

08001304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_2_IRQHandler>
	...

08001308 <STK_u8Init>:
#include"SYSTICK_Interface.h"

static void (*STK_PtrCallBack)(void) = {NULLPTR };
static u8 STK_CHAECK_PERODIC = 0;
static u8 STK_ProtectionFlage = 0;
Error_t STK_u8Init() {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

// Enable ISR
#if STK_SOURCE == STK_u8AHB
	SET_BIT(SYSTICK->STK_CTRL ,2);
	#elif STK_SOURCE == STK_u8AHB_8
	CLR_BIT(SYSTICK->STK_CTRL, 2);
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <STK_u8Init+0x1c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <STK_u8Init+0x1c>)
 8001312:	f023 0304 	bic.w	r3, r3, #4
 8001316:	6013      	str	r3, [r2, #0]
     #warning"define STK_SOURCE "
	#endif 
	// enable STK
	//SET_BIT(SYSTICK->STK_CTRL, 0);
	// Enable CR source
	return OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <STK_u8SetIntervalSingle>:

	}
	// return
	return local_u8status;
}
Error_t STK_u8SetIntervalSingle(u32 Copy_time_MS, void (*STK_FunISR)(void)) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	Error_t local_u8status = NOK;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]

	if (STK_ProtectionFlage == 0) {
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <STK_u8SetIntervalSingle+0x5c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11d      	bne.n	800137a <STK_u8SetIntervalSingle+0x52>
		local_u8status = OK;
 800133e:	2300      	movs	r3, #0
 8001340:	73fb      	strb	r3, [r7, #15]
		STK_ProtectionFlage = 1;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <STK_u8SetIntervalSingle+0x5c>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
		// enable inturrupt
		//STK_u8ENInterrupt();
		// forward function to isr -- clear load and
		STK_CHAECK_PERODIC = 1;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <STK_u8SetIntervalSingle+0x60>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
		if (STK_FunISR != NULLPTR) {
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <STK_u8SetIntervalSingle+0x34>
			STK_u8SetCallBack(STK_FunISR);
 8001354:	6838      	ldr	r0, [r7, #0]
 8001356:	f000 f86f 	bl	8001438 <STK_u8SetCallBack>
 800135a:	e001      	b.n	8001360 <STK_u8SetIntervalSingle+0x38>
		} else {
			local_u8status = NOK;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
		}
		// set loud
		if (Copy_time_MS < STK_MAXVALUE) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001366:	4293      	cmp	r3, r2
 8001368:	d205      	bcs.n	8001376 <STK_u8SetIntervalSingle+0x4e>
			SYSTICK->STK_LOAD = Copy_time_MS;
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <STK_u8SetIntervalSingle+0x64>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6053      	str	r3, [r2, #4]
			STK_u8StartTimer();
 8001370:	f000 f82e 	bl	80013d0 <STK_u8StartTimer>
 8001374:	e001      	b.n	800137a <STK_u8SetIntervalSingle+0x52>
		} else {
			local_u8status = NOK;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
		}
	}
	// return
	return local_u8status;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200000c5 	.word	0x200000c5
 8001388:	200000c4 	.word	0x200000c4
 800138c:	e000e010 	.word	0xe000e010

08001390 <STK_u8StopTimer>:
	}

	// return
	return local_u8status;
}
Error_t STK_u8StopTimer() {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	// set loud and value with zeroxs
	Error_t local_u8status = OK;
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
	STK_ProtectionFlage = 0;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <STK_u8StopTimer+0x38>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
	CLR_BIT(SYSTICK->STK_CTRL, 0);
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <STK_u8StopTimer+0x3c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <STK_u8StopTimer+0x3c>)
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]
	SYSTICK->STK_LOAD = 0;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <STK_u8StopTimer+0x3c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
	SYSTICK->STK_VAL  = 0;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <STK_u8StopTimer+0x3c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
	STK_u8DSInterrupt();
 80013b8:	f000 f82e 	bl	8001418 <STK_u8DSInterrupt>

	return local_u8status;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200000c5 	.word	0x200000c5
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <STK_u8StartTimer>:
Error_t STK_u8StartTimer() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	// set loud and value with zeroxs
	Error_t local_u8status = OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
	STK_u8ENInterrupt();
 80013da:	f000 f80d 	bl	80013f8 <STK_u8ENInterrupt>
	SET_BIT(SYSTICK->STK_CTRL, 0);
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <STK_u8StartTimer+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <STK_u8StartTimer+0x24>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6013      	str	r3, [r2, #0]
	return local_u8status;
 80013ea:	79fb      	ldrb	r3, [r7, #7]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <STK_u8ENInterrupt>:
	Error_t local_u8status = OK;
	*Ptr_Remind = SYSTICK->STK_VAL;
	return local_u8status;

}
Error_t STK_u8ENInterrupt() {
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	SET_BIT(SYSTICK->STK_CTRL, 1);
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <STK_u8ENInterrupt+0x1c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <STK_u8ENInterrupt+0x1c>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	6013      	str	r3, [r2, #0]
	return OK;
 8001408:	2300      	movs	r3, #0

}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <STK_u8DSInterrupt>:
Error_t STK_u8DSInterrupt() {
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	CLR_BIT(SYSTICK->STK_CTRL, 1);
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <STK_u8DSInterrupt+0x1c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <STK_u8DSInterrupt+0x1c>)
 8001422:	f023 0302 	bic.w	r3, r3, #2
 8001426:	6013      	str	r3, [r2, #0]
	return OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <STK_u8SetCallBack>:
Error_t STK_u8SetCallBack(void (*FunPtr)(void)) {
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	Error_t local_u8status = OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
	if (*FunPtr != NULLPTR) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <STK_u8SetCallBack+0x1a>
		STK_PtrCallBack = FunPtr;
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <STK_u8SetCallBack+0x2c>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e001      	b.n	8001456 <STK_u8SetCallBack+0x1e>
	} else {
		local_u8status = NOK;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
	}
	return local_u8status;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200000c0 	.word	0x200000c0

08001468 <SysTick_Handler>:
void SysTick_Handler() {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

	if (STK_CHAECK_PERODIC == 1) {
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <SysTick_Handler+0x28>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d107      	bne.n	8001484 <SysTick_Handler+0x1c>
		STK_u8StopTimer();
 8001474:	f7ff ff8c 	bl	8001390 <STK_u8StopTimer>
		STK_CHAECK_PERODIC = 0;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Handler+0x28>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
		STK_ProtectionFlage = 0;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Handler+0x2c>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
	} else {
		// do nothing
	}
	STK_PtrCallBack();
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Handler+0x30>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4798      	blx	r3

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000c4 	.word	0x200000c4
 8001494:	200000c5 	.word	0x200000c5
 8001498:	200000c0 	.word	0x200000c0

0800149c <UART1_voidInit>:
/*
 void (*UART1_CallBack[UART_CALLBACK_SIZE])(void) =
 {	NULLPTR, NULLPTR,NULLPTR,NULLPTR };
 */

void UART1_voidInit() {
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

	/******** baud rate **********/
	UART1->USART_BRR = BAUDRATE;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <UART1_voidInit+0x6c>)
 80014a2:	2245      	movs	r2, #69	; 0x45
 80014a4:	609a      	str	r2, [r3, #8]

	/******** frame format *******/
//no parity
	CLR_BIT(UART1->USART_CR1, PCE);
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <UART1_voidInit+0x6c>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <UART1_voidInit+0x6c>)
 80014ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014b0:	60d3      	str	r3, [r2, #12]
// 1 start 8bit data n stop
	CLR_BIT(UART1->USART_CR1, M);
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <UART1_voidInit+0x6c>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <UART1_voidInit+0x6c>)
 80014b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014bc:	60d3      	str	r3, [r2, #12]
// 1 stop bit
	CLR_BIT(UART1->USART_CR2, StOP_0);
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <UART1_voidInit+0x6c>)
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <UART1_voidInit+0x6c>)
 80014c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014c8:	6113      	str	r3, [r2, #16]
	CLR_BIT(UART1->USART_CR2, StOP_1);
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <UART1_voidInit+0x6c>)
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <UART1_voidInit+0x6c>)
 80014d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014d4:	6113      	str	r3, [r2, #16]

	/******** enable RX **********/
	SET_BIT(UART1->USART_CR1, RE);
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <UART1_voidInit+0x6c>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <UART1_voidInit+0x6c>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	60d3      	str	r3, [r2, #12]
	/******** enable TX **********/
	SET_BIT(UART1->USART_CR1, TE);
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <UART1_voidInit+0x6c>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <UART1_voidInit+0x6c>)
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	60d3      	str	r3, [r2, #12]
	/*********UART enable ********/
	SET_BIT(UART1->USART_CR1, UE);
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <UART1_voidInit+0x6c>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <UART1_voidInit+0x6c>)
 80014f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f8:	60d3      	str	r3, [r2, #12]
	// clr status reg
	UART1->USART_SR = 0;
 80014fa:	4b03      	ldr	r3, [pc, #12]	; (8001508 <UART1_voidInit+0x6c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40013800 	.word	0x40013800

0800150c <UART1_u8SendByteBusyw8>:

Error_t UART1_u8SendByteBusyw8(u8 data) {
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	Error_t local_u8Status = OK;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
	while (!READ_BIT(UART1->USART_SR, TXE))
 800151a:	bf00      	nop
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <UART1_u8SendByteBusyw8+0x3c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f9      	beq.n	800151c <UART1_u8SendByteBusyw8+0x10>
		; // txe ---- time out is needed
	UART1->USART_DR = data;
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <UART1_u8SendByteBusyw8+0x3c>)
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	6053      	str	r3, [r2, #4]
	CLR_BIT(UART1->USART_SR, TXE);
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <UART1_u8SendByteBusyw8+0x3c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <UART1_u8SendByteBusyw8+0x3c>)
 8001534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001538:	6013      	str	r3, [r2, #0]
	return local_u8Status;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40013800 	.word	0x40013800

0800154c <UART1_u8SendStringBusyW8>:
	*data = UART1->USART_DR;
	CLR_BIT(UART1->USART_SR, RXNE);
	return local_u8Status;
}

Error_t UART1_u8SendStringBusyW8(char *data) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73bb      	strb	r3, [r7, #14]

	for (u8 local_index = 0; data[local_index]; local_index++) {
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e009      	b.n	8001572 <UART1_u8SendStringBusyW8+0x26>
		UART1_u8SendByteBusyw8(data[local_index]);
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ffd0 	bl	800150c <UART1_u8SendByteBusyw8>
	for (u8 local_index = 0; data[local_index]; local_index++) {
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ef      	bne.n	800155e <UART1_u8SendStringBusyW8+0x12>
	}
	return local_u8Status;
 800157e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <UART1_u8RecieveByte>:

	return local_u8Status;

}

Error_t UART1_u8RecieveByte(volatile u8 *data) {
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
// return DR reg
	*data = UART1->USART_DR;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <UART1_u8RecieveByte+0x24>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	701a      	strb	r2, [r3, #0]
	return local_u8Status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]

}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40013800 	.word	0x40013800

080015b0 <UART1_u8SendNumString>:
	UART1_u8SendByteBusyw8(localptr[3]);

	return local_u8Status;

}
Error_t UART1_u8SendNumString(u32 copy_u32num) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	75bb      	strb	r3, [r7, #22]
	u8 local_String[10];
	s8 index;
	if (copy_u32num != 0) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d03f      	beq.n	8001642 <UART1_u8SendNumString+0x92>
		for (index = 0; copy_u32num; index++) {
 80015c2:	2300      	movs	r3, #0
 80015c4:	75fb      	strb	r3, [r7, #23]
 80015c6:	e01e      	b.n	8001606 <UART1_u8SendNumString+0x56>
			local_String[index] = copy_u32num % 10 + '0';
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <UART1_u8SendNumString+0xa4>)
 80015cc:	fba3 2301 	umull	r2, r3, r3, r1
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	1aca      	subs	r2, r1, r3
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015e2:	3230      	adds	r2, #48	; 0x30
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	3318      	adds	r3, #24
 80015e8:	443b      	add	r3, r7
 80015ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
			copy_u32num /= 10;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a18      	ldr	r2, [pc, #96]	; (8001654 <UART1_u8SendNumString+0xa4>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	607b      	str	r3, [r7, #4]
		for (index = 0; copy_u32num; index++) {
 80015fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	3301      	adds	r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	75fb      	strb	r3, [r7, #23]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1dd      	bne.n	80015c8 <UART1_u8SendNumString+0x18>
		}
		index--;
 800160c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3b01      	subs	r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	75fb      	strb	r3, [r7, #23]
		for (; index >= 0; index--) {
 8001618:	e00e      	b.n	8001638 <UART1_u8SendNumString+0x88>
			UART1_u8SendByteBusyw8(local_String[index]);
 800161a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800161e:	3318      	adds	r3, #24
 8001620:	443b      	add	r3, r7
 8001622:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff70 	bl	800150c <UART1_u8SendByteBusyw8>
		for (; index >= 0; index--) {
 800162c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3b01      	subs	r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	75fb      	strb	r3, [r7, #23]
 8001638:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800163c:	2b00      	cmp	r3, #0
 800163e:	daec      	bge.n	800161a <UART1_u8SendNumString+0x6a>
 8001640:	e002      	b.n	8001648 <UART1_u8SendNumString+0x98>
		}
	} else {
		UART1_u8SendByteBusyw8('0');
 8001642:	2030      	movs	r0, #48	; 0x30
 8001644:	f7ff ff62 	bl	800150c <UART1_u8SendByteBusyw8>
	}

	return local_u8Status;
 8001648:	7dbb      	ldrb	r3, [r7, #22]

}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	cccccccd 	.word	0xcccccccd

08001658 <UART1_u8EnterruptEnRX>:
	UART1_MUNRX = 0;
	UART1_DataReady = 0;
}

Error_t UART1_u8RecieveStringBusyW8(u8 *data);
Error_t UART1_u8EnterruptEnRX(void) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
	Error_t local_u8Status = OK;
 800165e:	2300      	movs	r3, #0
 8001660:	71fb      	strb	r3, [r7, #7]
	SET_BIT(UART1->USART_CR1, RXNEIE);
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <UART1_u8EnterruptEnRX+0x24>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <UART1_u8EnterruptEnRX+0x24>)
 8001668:	f043 0320 	orr.w	r3, r3, #32
 800166c:	60d3      	str	r3, [r2, #12]
	return local_u8Status;
 800166e:	79fb      	ldrb	r3, [r7, #7]
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40013800 	.word	0x40013800

08001680 <UART1_u8EnterruptDsRX>:
Error_t UART1_u8EnterruptDsRX(void) {
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
	Error_t local_u8Status = OK;
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(UART1->USART_CR1, RXNEIE);
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <UART1_u8EnterruptDsRX+0x24>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <UART1_u8EnterruptDsRX+0x24>)
 8001690:	f023 0320 	bic.w	r3, r3, #32
 8001694:	60d3      	str	r3, [r2, #12]
	return local_u8Status;
 8001696:	79fb      	ldrb	r3, [r7, #7]
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40013800 	.word	0x40013800

080016a8 <UART1_u8EnterruptCallBackRX>:
Error_t UART1_u8EnterruptCallBackRX(void (*Rx)(void)) {
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
	if (Rx != NULLPTR) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <UART1_u8EnterruptCallBackRX+0x1a>
		GlobalRX = Rx;
 80016ba:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <UART1_u8EnterruptCallBackRX+0x2c>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e001      	b.n	80016c6 <UART1_u8EnterruptCallBackRX+0x1e>
	} else {
		local_u8Status = NULL_PTR;
 80016c2:	2303      	movs	r3, #3
 80016c4:	73fb      	strb	r3, [r7, #15]
	}
	return local_u8Status;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200000c8 	.word	0x200000c8

080016d8 <USART1_IRQHandler>:
	Error_t local_u8Status = OK;

	return local_u8Status;
}

void USART1_IRQHandler(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	 } else {
	 // do nothing
	 }
	 }
	 */
	if (READ_BIT(UART1->USART_SR, RXNE)) {
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <USART1_IRQHandler+0x30>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00c      	beq.n	8001702 <USART1_IRQHandler+0x2a>
		if (GlobalRX) {
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <USART1_IRQHandler+0x34>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <USART1_IRQHandler+0x1e>
			GlobalRX();
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <USART1_IRQHandler+0x34>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4798      	blx	r3

		}
		CLR_BIT(UART1->USART_SR, RXNE);
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <USART1_IRQHandler+0x30>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a03      	ldr	r2, [pc, #12]	; (8001708 <USART1_IRQHandler+0x30>)
 80016fc:	f023 0320 	bic.w	r3, r3, #32
 8001700:	6013      	str	r3, [r2, #0]

	}

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40013800 	.word	0x40013800
 800170c:	200000c8 	.word	0x200000c8

08001710 <UART2_voidInit>:
/*
 void (*UART2_CallBack[UART_CALLBACK_SIZE])(void) =
 {	NULLPTR, NULLPTR,NULLPTR,NULLPTR };
 */

void UART2_voidInit() {
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

	/******** baud rate **********/
	UART2->USART_BRR = BAUDRATE;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <UART2_voidInit+0x6c>)
 8001716:	2245      	movs	r2, #69	; 0x45
 8001718:	609a      	str	r2, [r3, #8]

	/******** frame format *******/
//no parity
	CLR_BIT(UART2->USART_CR1, PCE);
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <UART2_voidInit+0x6c>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <UART2_voidInit+0x6c>)
 8001720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001724:	60d3      	str	r3, [r2, #12]
// 1 start 8bit data n stop
	CLR_BIT(UART2->USART_CR1, M);
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <UART2_voidInit+0x6c>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	4a14      	ldr	r2, [pc, #80]	; (800177c <UART2_voidInit+0x6c>)
 800172c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001730:	60d3      	str	r3, [r2, #12]
// 1 stop bit
	CLR_BIT(UART2->USART_CR2, StOP_0);
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <UART2_voidInit+0x6c>)
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4a11      	ldr	r2, [pc, #68]	; (800177c <UART2_voidInit+0x6c>)
 8001738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800173c:	6113      	str	r3, [r2, #16]
	CLR_BIT(UART2->USART_CR2, StOP_1);
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <UART2_voidInit+0x6c>)
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <UART2_voidInit+0x6c>)
 8001744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001748:	6113      	str	r3, [r2, #16]

	/******** enable RX **********/
	SET_BIT(UART2->USART_CR1, RE);
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <UART2_voidInit+0x6c>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <UART2_voidInit+0x6c>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	60d3      	str	r3, [r2, #12]
	/******** enable TX **********/
	SET_BIT(UART2->USART_CR1, TE);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <UART2_voidInit+0x6c>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <UART2_voidInit+0x6c>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	60d3      	str	r3, [r2, #12]
	/*********UART enable ********/
	SET_BIT(UART2->USART_CR1, UE);
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <UART2_voidInit+0x6c>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <UART2_voidInit+0x6c>)
 8001768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800176c:	60d3      	str	r3, [r2, #12]
	// clr status reg
	UART2->USART_SR = 0;
 800176e:	4b03      	ldr	r3, [pc, #12]	; (800177c <UART2_voidInit+0x6c>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	40004400 	.word	0x40004400

08001780 <UART2_u8EnterruptDsRX>:
Error_t UART2_u8EnterruptEnRX(void) {
	Error_t local_u8Status = OK;
	SET_BIT(UART2->USART_CR1, RXNEIE);
	return local_u8Status;
}
Error_t UART2_u8EnterruptDsRX(void) {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
	Error_t local_u8Status = OK;
 8001786:	2300      	movs	r3, #0
 8001788:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(UART2->USART_CR1, RXNEIE);
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <UART2_u8EnterruptDsRX+0x24>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <UART2_u8EnterruptDsRX+0x24>)
 8001790:	f023 0320 	bic.w	r3, r3, #32
 8001794:	60d3      	str	r3, [r2, #12]
	return local_u8Status;
 8001796:	79fb      	ldrb	r3, [r7, #7]
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40004400 	.word	0x40004400

080017a8 <__libc_init_array>:
 80017a8:	b570      	push	{r4, r5, r6, lr}
 80017aa:	2600      	movs	r6, #0
 80017ac:	4d0c      	ldr	r5, [pc, #48]	; (80017e0 <__libc_init_array+0x38>)
 80017ae:	4c0d      	ldr	r4, [pc, #52]	; (80017e4 <__libc_init_array+0x3c>)
 80017b0:	1b64      	subs	r4, r4, r5
 80017b2:	10a4      	asrs	r4, r4, #2
 80017b4:	42a6      	cmp	r6, r4
 80017b6:	d109      	bne.n	80017cc <__libc_init_array+0x24>
 80017b8:	f000 f81a 	bl	80017f0 <_init>
 80017bc:	2600      	movs	r6, #0
 80017be:	4d0a      	ldr	r5, [pc, #40]	; (80017e8 <__libc_init_array+0x40>)
 80017c0:	4c0a      	ldr	r4, [pc, #40]	; (80017ec <__libc_init_array+0x44>)
 80017c2:	1b64      	subs	r4, r4, r5
 80017c4:	10a4      	asrs	r4, r4, #2
 80017c6:	42a6      	cmp	r6, r4
 80017c8:	d105      	bne.n	80017d6 <__libc_init_array+0x2e>
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
 80017cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80017d0:	4798      	blx	r3
 80017d2:	3601      	adds	r6, #1
 80017d4:	e7ee      	b.n	80017b4 <__libc_init_array+0xc>
 80017d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017da:	4798      	blx	r3
 80017dc:	3601      	adds	r6, #1
 80017de:	e7f2      	b.n	80017c6 <__libc_init_array+0x1e>
 80017e0:	08001888 	.word	0x08001888
 80017e4:	08001888 	.word	0x08001888
 80017e8:	08001888 	.word	0x08001888
 80017ec:	0800188c 	.word	0x0800188c

080017f0 <_init>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	bf00      	nop
 80017f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f6:	bc08      	pop	{r3}
 80017f8:	469e      	mov	lr, r3
 80017fa:	4770      	bx	lr

080017fc <_fini>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	bf00      	nop
 8001800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001802:	bc08      	pop	{r3}
 8001804:	469e      	mov	lr, r3
 8001806:	4770      	bx	lr
