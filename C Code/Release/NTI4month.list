
NTI4month.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e30  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08000f60  08000f60  00010f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fd4  08000fd4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000fd4  08000fd4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fd4  08000fd4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fd4  08000fd4  00010fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fd8  08000fd8  00010fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000fdc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000004  08000fe0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08000fe0  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d83  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bcf  00000000  00000000  00022df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  000239c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000026b  00000000  00000000  00023d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b5f  00000000  00000000  00023fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001938  00000000  00000000  00025b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00000bd8  00000000  00000000  00027444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000055  00000000  00000000  0002801c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f48 	.word	0x08000f48

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000f48 	.word	0x08000f48

08000170 <Bootloader_Init>:

__attribute__((always_inline)) static inline void __set_MSP(u32 topOfMainStack) {
	__asm volatile("MSR msp, %0\n" : : "r" (topOfMainStack) );
}

void Bootloader_Init() {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	///  UART INIT
	RCC_voidEnablePeriphralCLK(APB2_USART1EN);
 8000174:	20d6      	movs	r0, #214	; 0xd6
 8000176:	f000 fcd1 	bl	8000b1c <RCC_voidEnablePeriphralCLK>
	UART1_voidInit(); // init uart 9600
 800017a:	f000 fded 	bl	8000d58 <UART1_voidInit>
	NVIC_u8Set_EN_IRQ(INTERRUPT_USART1);
 800017e:	2025      	movs	r0, #37	; 0x25
 8000180:	f000 fc9a 	bl	8000ab8 <NVIC_u8Set_EN_IRQ>
	UART1_u8EnterruptCallBackRX(&RX_Fun);
 8000184:	4803      	ldr	r0, [pc, #12]	; (8000194 <Bootloader_Init+0x24>)
 8000186:	f000 fe87 	bl	8000e98 <UART1_u8EnterruptCallBackRX>
	UART1_u8EnterruptEnRX();
 800018a:	f000 fe71 	bl	8000e70 <UART1_u8EnterruptEnRX>

}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	080002fd 	.word	0x080002fd

08000198 <Bootloader_voidfReciveFlash>:

	*/
	jumpToApplication();

}
void Bootloader_voidfReciveFlash(){
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af02      	add	r7, sp, #8

	if (dataReciev == 1) {
 800019e:	4b3b      	ldr	r3, [pc, #236]	; (800028c <Bootloader_voidfReciveFlash+0xf4>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d155      	bne.n	8000252 <Bootloader_voidfReciveFlash+0xba>
		if (Flash_lock == 1) {
 80001a6:	4b3a      	ldr	r3, [pc, #232]	; (8000290 <Bootloader_voidfReciveFlash+0xf8>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d104      	bne.n	80001b8 <Bootloader_voidfReciveFlash+0x20>
			Flash_lock = 0;
 80001ae:	4b38      	ldr	r3, [pc, #224]	; (8000290 <Bootloader_voidfReciveFlash+0xf8>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	701a      	strb	r2, [r3, #0]
			BootLocationEreas();
 80001b4:	f000 f87c 	bl	80002b0 <BootLocationEreas>
		}else {

			// do nothing
		}

		RedesignHex1Bytes((u8*) arr, (u8*) RedesignHexdata, HEXFILESIZE);
 80001b8:	2228      	movs	r2, #40	; 0x28
 80001ba:	4936      	ldr	r1, [pc, #216]	; (8000294 <Bootloader_voidfReciveFlash+0xfc>)
 80001bc:	4836      	ldr	r0, [pc, #216]	; (8000298 <Bootloader_voidfReciveFlash+0x100>)
 80001be:	f000 fbd5 	bl	800096c <RedesignHex1Bytes>
		u16 ReturnAdd = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	82fb      	strh	r3, [r7, #22]
		u8 ReturnSize = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	757b      	strb	r3, [r7, #21]
		u8 ReturnTybe = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	753b      	strb	r3, [r7, #20]
		u8 ReturnChecksum = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	74fb      	strb	r3, [r7, #19]
		u8 ReturnData[16] = { 0 };
 80001d2:	2300      	movs	r3, #0
 80001d4:	603b      	str	r3, [r7, #0]
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]




		HEX_voidParseFrame((u8*) RedesignHexdata, &ReturnAdd, ReturnData,
 80001e0:	f107 0015 	add.w	r0, r7, #21
 80001e4:	463a      	mov	r2, r7
 80001e6:	f107 0116 	add.w	r1, r7, #22
 80001ea:	f107 0314 	add.w	r3, r7, #20
 80001ee:	9301      	str	r3, [sp, #4]
 80001f0:	f107 0313 	add.w	r3, r7, #19
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	4603      	mov	r3, r0
 80001f8:	4826      	ldr	r0, [pc, #152]	; (8000294 <Bootloader_voidfReciveFlash+0xfc>)
 80001fa:	f000 fb69 	bl	80008d0 <HEX_voidParseFrame>
		 UART1_u8SendNumString(RedesignHexdata[i]);
		 UART1_u8SendStringBusyW8("-");
		 }
		 */

		if (ReturnTybe == HEX_DATARECORDER) {
 80001fe:	7d3b      	ldrb	r3, [r7, #20]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d111      	bne.n	8000228 <Bootloader_voidfReciveFlash+0x90>
			FLASH_enWriteArray(FLASH_BASE_ADDRESS + ReturnAdd,
 8000204:	8afb      	ldrh	r3, [r7, #22]
 8000206:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800020a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800020e:	4618      	mov	r0, r3
 8000210:	7d7b      	ldrb	r3, [r7, #21]
 8000212:	085b      	lsrs	r3, r3, #1
 8000214:	b2db      	uxtb	r3, r3
 8000216:	4619      	mov	r1, r3
 8000218:	463b      	mov	r3, r7
 800021a:	461a      	mov	r2, r3
 800021c:	f000 f954 	bl	80004c8 <FLASH_enWriteArray>
					ReturnSize / 2, (u16*) ReturnData);
			UART1_u8SendStringBusyW8("WROTE");
 8000220:	481e      	ldr	r0, [pc, #120]	; (800029c <Bootloader_voidfReciveFlash+0x104>)
 8000222:	f000 fdf3 	bl	8000e0c <UART1_u8SendStringBusyW8>
 8000226:	e008      	b.n	800023a <Bootloader_voidfReciveFlash+0xa2>

		} else if (ReturnTybe == HEX_ENDOFRECORD) {
 8000228:	7d3b      	ldrb	r3, [r7, #20]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d105      	bne.n	800023a <Bootloader_voidfReciveFlash+0xa2>
			UART1_u8SendStringBusyW8("\n");
 800022e:	481c      	ldr	r0, [pc, #112]	; (80002a0 <Bootloader_voidfReciveFlash+0x108>)
 8000230:	f000 fdec 	bl	8000e0c <UART1_u8SendStringBusyW8>
			UART1_u8SendStringBusyW8("OK");
 8000234:	481b      	ldr	r0, [pc, #108]	; (80002a4 <Bootloader_voidfReciveFlash+0x10c>)
 8000236:	f000 fde9 	bl	8000e0c <UART1_u8SendStringBusyW8>

		}

		UART1_u8SendStringBusyW8("\n");
 800023a:	4819      	ldr	r0, [pc, #100]	; (80002a0 <Bootloader_voidfReciveFlash+0x108>)
 800023c:	f000 fde6 	bl	8000e0c <UART1_u8SendStringBusyW8>

		UART1_u8SendStringBusyW8("OK");
 8000240:	4818      	ldr	r0, [pc, #96]	; (80002a4 <Bootloader_voidfReciveFlash+0x10c>)
 8000242:	f000 fde3 	bl	8000e0c <UART1_u8SendStringBusyW8>
		Stack_ptr = 0;
 8000246:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <Bootloader_voidfReciveFlash+0x110>)
 8000248:	2200      	movs	r2, #0
 800024a:	701a      	strb	r2, [r3, #0]
		dataReciev = 0;
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <Bootloader_voidfReciveFlash+0xf4>)
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]

	}


	STK_u8SetBusyWait(20);
 8000252:	2014      	movs	r0, #20
 8000254:	f000 fd0c 	bl	8000c70 <STK_u8SetBusyWait>
	GPIO_u8SetPinV_ID(Pin_C13, data);
 8000258:	4b14      	ldr	r3, [pc, #80]	; (80002ac <Bootloader_voidfReciveFlash+0x114>)
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	b2db      	uxtb	r3, r3
 800025e:	4619      	mov	r1, r3
 8000260:	202d      	movs	r0, #45	; 0x2d
 8000262:	f000 fad5 	bl	8000810 <GPIO_u8SetPinV_ID>
	data = !data;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <Bootloader_voidfReciveFlash+0x114>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	bf0c      	ite	eq
 800026e:	2301      	moveq	r3, #1
 8000270:	2300      	movne	r3, #0
 8000272:	b2db      	uxtb	r3, r3
 8000274:	b29a      	uxth	r2, r3
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <Bootloader_voidfReciveFlash+0x114>)
 8000278:	801a      	strh	r2, [r3, #0]
	GPIO_u8SetPinV_ID(Pin_A6, LOW);
 800027a:	2100      	movs	r1, #0
 800027c:	2006      	movs	r0, #6
 800027e:	f000 fac7 	bl	8000810 <GPIO_u8SetPinV_ID>
}
 8000282:	bf00      	nop
 8000284:	3718      	adds	r7, #24
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	200000b0 	.word	0x200000b0
 8000290:	20000000 	.word	0x20000000
 8000294:	20000088 	.word	0x20000088
 8000298:	20000020 	.word	0x20000020
 800029c:	08000f64 	.word	0x08000f64
 80002a0:	08000f6c 	.word	0x08000f6c
 80002a4:	08000f70 	.word	0x08000f70
 80002a8:	20000084 	.word	0x20000084
 80002ac:	20000086 	.word	0x20000086

080002b0 <BootLocationEreas>:
 addr_to_call();
 }
 }
 */

void BootLocationEreas() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	u16 local_u16page = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	80bb      	strh	r3, [r7, #4]
	FLASH_enCalculatePages(FLASH_BASE_ADDRESS, &local_u16page);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4619      	mov	r1, r3
 80002be:	480e      	ldr	r0, [pc, #56]	; (80002f8 <BootLocationEreas+0x48>)
 80002c0:	f000 f866 	bl	8000390 <FLASH_enCalculatePages>
	UART1_u8SendByteBusyw8(local_u16page);
 80002c4:	88bb      	ldrh	r3, [r7, #4]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fd7f 	bl	8000dcc <UART1_u8SendByteBusyw8>
	for (u8 indxFlash_u8Page = local_u16page;
 80002ce:	88bb      	ldrh	r3, [r7, #4]
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	e006      	b.n	80002e2 <BootLocationEreas+0x32>
			indxFlash_u8Page < local_u16page + FLASH_ERASE_SIZE;
			indxFlash_u8Page++) {
		FLASH_enErasePage(indxFlash_u8Page);
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f8c6 	bl	8000468 <FLASH_enErasePage>
			indxFlash_u8Page++) {
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	3301      	adds	r3, #1
 80002e0:	71fb      	strb	r3, [r7, #7]
			indxFlash_u8Page < local_u16page + FLASH_ERASE_SIZE;
 80002e2:	88bb      	ldrh	r3, [r7, #4]
 80002e4:	1d1a      	adds	r2, r3, #4
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	daf3      	bge.n	80002d4 <BootLocationEreas+0x24>

	}
}
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	08004000 	.word	0x08004000

080002fc <RX_Fun>:



void RX_Fun(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	FlagCounter++;
 8000300:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <RX_Fun+0x7c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	3301      	adds	r3, #1
 8000306:	4a1c      	ldr	r2, [pc, #112]	; (8000378 <RX_Fun+0x7c>)
 8000308:	6013      	str	r3, [r2, #0]
	static u8 datalast = 'A';

	UART1_u8RecieveByte(&datalast);
 800030a:	481c      	ldr	r0, [pc, #112]	; (800037c <RX_Fun+0x80>)
 800030c:	f000 fd9c 	bl	8000e48 <UART1_u8RecieveByte>
	if (datalast != ':' && datalast != '#') {
 8000310:	4b1a      	ldr	r3, [pc, #104]	; (800037c <RX_Fun+0x80>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b3a      	cmp	r3, #58	; 0x3a
 8000316:	d010      	beq.n	800033a <RX_Fun+0x3e>
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <RX_Fun+0x80>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b23      	cmp	r3, #35	; 0x23
 800031e:	d00c      	beq.n	800033a <RX_Fun+0x3e>
		arr[Stack_ptr] = datalast;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <RX_Fun+0x84>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <RX_Fun+0x80>)
 8000328:	7819      	ldrb	r1, [r3, #0]
 800032a:	4b16      	ldr	r3, [pc, #88]	; (8000384 <RX_Fun+0x88>)
 800032c:	5499      	strb	r1, [r3, r2]
		Stack_ptr++;
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <RX_Fun+0x84>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <RX_Fun+0x84>)
 8000338:	701a      	strb	r2, [r3, #0]
	}

	if (datalast == '#') {
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <RX_Fun+0x80>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b23      	cmp	r3, #35	; 0x23
 8000340:	d108      	bne.n	8000354 <RX_Fun+0x58>
		arr[Stack_ptr] = 0;
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <RX_Fun+0x84>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	461a      	mov	r2, r3
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <RX_Fun+0x88>)
 800034a:	2100      	movs	r1, #0
 800034c:	5499      	strb	r1, [r3, r2]
		dataReciev = 1;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <RX_Fun+0x8c>)
 8000350:	2201      	movs	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
	}
	static u8 data1 = 0;
	// STK_u8SetBusyWait(2);
//	Delay(500);
	GPIO_u8SetPinV_ID(Pin_A6, data1);
 8000354:	4b0d      	ldr	r3, [pc, #52]	; (800038c <RX_Fun+0x90>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	2006      	movs	r0, #6
 800035c:	f000 fa58 	bl	8000810 <GPIO_u8SetPinV_ID>
	data1 = !data1;
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <RX_Fun+0x90>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf0c      	ite	eq
 8000368:	2301      	moveq	r3, #1
 800036a:	2300      	movne	r3, #0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <RX_Fun+0x90>)
 8000372:	701a      	strb	r2, [r3, #0]
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	200000b4 	.word	0x200000b4
 800037c:	20000001 	.word	0x20000001
 8000380:	20000084 	.word	0x20000084
 8000384:	20000020 	.word	0x20000020
 8000388:	200000b0 	.word	0x200000b0
 800038c:	200000b8 	.word	0x200000b8

08000390 <FLASH_enCalculatePages>:

#include "FLASH_Private.h"
#include "FLASH_Conf.h"
#include "FLASH_Interface.h"

FLASH_enERR_T FLASH_enCalculatePages(u32 Copy_Address, u16 *Ptr_u16ReturnData) {
 8000390:	b4b0      	push	{r4, r5, r7}
 8000392:	b087      	sub	sp, #28
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
	FLASH_enERR_T Local_state = FLASH_OK;
 800039a:	2100      	movs	r1, #0
 800039c:	75f9      	strb	r1, [r7, #23]

	s64 Local_calculatedData = Copy_Address - FLASH_START;
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 80003a4:	2000      	movs	r0, #0
 80003a6:	460a      	mov	r2, r1
 80003a8:	4603      	mov	r3, r0
 80003aa:	e9c7 2302 	strd	r2, r3, [r7, #8]

	Local_calculatedData = Local_calculatedData / FLASH_PAGE;
 80003ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	da06      	bge.n	80003c4 <FLASH_enCalculatePages+0x34>
 80003b6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80003ba:	1854      	adds	r4, r2, r1
 80003bc:	f143 0500 	adc.w	r5, r3, #0
 80003c0:	4622      	mov	r2, r4
 80003c2:	462b      	mov	r3, r5
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	f04f 0100 	mov.w	r1, #0
 80003cc:	0ad0      	lsrs	r0, r2, #11
 80003ce:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
 80003d2:	12d9      	asrs	r1, r3, #11
 80003d4:	e9c7 0102 	strd	r0, r1, [r7, #8]

	if (Local_calculatedData < 0) {
 80003d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	da02      	bge.n	80003e6 <FLASH_enCalculatePages+0x56>
		Local_state = FLASH_ERR;
 80003e0:	2307      	movs	r3, #7
 80003e2:	75fb      	strb	r3, [r7, #23]
 80003e4:	e002      	b.n	80003ec <FLASH_enCalculatePages+0x5c>
	} else {
		*Ptr_u16ReturnData = Local_calculatedData;
 80003e6:	893a      	ldrh	r2, [r7, #8]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	801a      	strh	r2, [r3, #0]
	}

	return Local_state;
 80003ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	371c      	adds	r7, #28
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bcb0      	pop	{r4, r5, r7}
 80003f6:	4770      	bx	lr

080003f8 <FLASH_enWaitClr>:
FLASH_enERR_T FLASH_enWaitClr() {
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
	FLASH_enERR_T Local_state = FLASH_OK;
 80003fe:	2300      	movs	r3, #0
 8000400:	71fb      	strb	r3, [r7, #7]
	while (READ_BIT(FLASH->FLASH_SR, SR_BSY))
 8000402:	bf00      	nop
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <FLASH_enWaitClr+0x6c>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	2b00      	cmp	r3, #0
 800040e:	d1f9      	bne.n	8000404 <FLASH_enWaitClr+0xc>
		; // Wait while the flash is busy
	if (READ_BIT(FLASH->FLASH_SR, SR_EOP)) // Check if End of Operation flag is set
 8000410:	4b14      	ldr	r3, [pc, #80]	; (8000464 <FLASH_enWaitClr+0x6c>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d005      	beq.n	8000428 <FLASH_enWaitClr+0x30>
		SET_BIT(FLASH->FLASH_SR, SR_EOP);    // Clear the flag
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <FLASH_enWaitClr+0x6c>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4a10      	ldr	r2, [pc, #64]	; (8000464 <FLASH_enWaitClr+0x6c>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	60d3      	str	r3, [r2, #12]
	if (READ_BIT(FLASH->FLASH_SR, SR_PGERR)) // Check for programming error
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <FLASH_enWaitClr+0x6c>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d005      	beq.n	8000440 <FLASH_enWaitClr+0x48>
		SET_BIT(FLASH->FLASH_SR, SR_PGERR);       // Clear the flag
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <FLASH_enWaitClr+0x6c>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <FLASH_enWaitClr+0x6c>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	60d3      	str	r3, [r2, #12]
	if (READ_BIT(FLASH->FLASH_SR, SR_WRPRTERR)) // Check for write protection error
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <FLASH_enWaitClr+0x6c>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	2b00      	cmp	r3, #0
 800044a:	d005      	beq.n	8000458 <FLASH_enWaitClr+0x60>
		SET_BIT(FLASH->FLASH_SR, SR_WRPRTERR);  // Clear the flag
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <FLASH_enWaitClr+0x6c>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <FLASH_enWaitClr+0x6c>)
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	60d3      	str	r3, [r2, #12]

	return Local_state;
 8000458:	79fb      	ldrb	r3, [r7, #7]
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40022000 	.word	0x40022000

08000468 <FLASH_enErasePage>:
FLASH_enERR_T FLASH_enErasePage(u8 Copy_u8page) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]

	FLASH_enERR_T Local_state = FLASH_OK;
 8000472:	2300      	movs	r3, #0
 8000474:	73fb      	strb	r3, [r7, #15]

	u32 local_u32PageAddress = FLASH_START + (Copy_u8page * FLASH_PAGE);
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800047c:	02db      	lsls	r3, r3, #11
 800047e:	60bb      	str	r3, [r7, #8]
	if (local_u32PageAddress < FLASH_END) {
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <FLASH_enErasePage+0x58>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d216      	bcs.n	80004b6 <FLASH_enErasePage+0x4e>
		SET_BIT(FLASH->FLASH_CR, CR_PER);           // set page erase
 8000488:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <FLASH_enErasePage+0x5c>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <FLASH_enErasePage+0x5c>)
 800048e:	f043 0302 	orr.w	r3, r3, #2
 8000492:	6113      	str	r3, [r2, #16]
		FLASH->FLASH_AR = local_u32PageAddress;   //select page add
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <FLASH_enErasePage+0x5c>)
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	6153      	str	r3, [r2, #20]
		SET_BIT(FLASH->FLASH_CR, CR_STRT);          // Start
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <FLASH_enErasePage+0x5c>)
 800049c:	691b      	ldr	r3, [r3, #16]
 800049e:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <FLASH_enErasePage+0x5c>)
 80004a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004a4:	6113      	str	r3, [r2, #16]

		FLASH_enWaitClr();                                 //wait and clr
 80004a6:	f7ff ffa7 	bl	80003f8 <FLASH_enWaitClr>
		CLR_BIT(FLASH->FLASH_CR, CR_PER);           // clr page erase
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <FLASH_enErasePage+0x5c>)
 80004ac:	691b      	ldr	r3, [r3, #16]
 80004ae:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <FLASH_enErasePage+0x5c>)
 80004b0:	f023 0302 	bic.w	r3, r3, #2
 80004b4:	6113      	str	r3, [r2, #16]
	} else {
		//do nothing
	}
	return Local_state;
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	0807ffff 	.word	0x0807ffff
 80004c4:	40022000 	.word	0x40022000

080004c8 <FLASH_enWriteArray>:
	}

	return Local_state;

}
FLASH_enERR_T FLASH_enWriteArray(u32 ptrAddress, u32 Copy_Size, u16 *Arr_u8Data) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]

	FLASH_enERR_T Local_state = FLASH_OK;
 80004d4:	2300      	movs	r3, #0
 80004d6:	75fb      	strb	r3, [r7, #23]
	Local_state = FLASH_enUnlock();
 80004d8:	f000 f872 	bl	80005c0 <FLASH_enUnlock>
 80004dc:	4603      	mov	r3, r0
 80004de:	75fb      	strb	r3, [r7, #23]
	FLASH_enWaitClr();         // wait and clr
 80004e0:	f7ff ff8a 	bl	80003f8 <FLASH_enWaitClr>
	if (Local_state == FLASH_OK) {
 80004e4:	7dfb      	ldrb	r3, [r7, #23]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d103      	bne.n	80004f2 <FLASH_enWriteArray+0x2a>
		Local_state = FlASH_enEnablePrograming();
 80004ea:	f000 f841 	bl	8000570 <FlASH_enEnablePrograming>
 80004ee:	4603      	mov	r3, r0
 80004f0:	75fb      	strb	r3, [r7, #23]
	} else {
		//do nothing
	}

	// wright seq on flash
	for (u32 Local_Index = 0; Local_Index < Copy_Size; Local_Index++) {
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
 80004f6:	e02e      	b.n	8000556 <FLASH_enWriteArray+0x8e>

		if ((ptrAddress + (Local_Index * FLASH_WORD)) > FLASH_START
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	005a      	lsls	r2, r3, #1
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4413      	add	r3, r2
 8000500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000504:	d91f      	bls.n	8000546 <FLASH_enWriteArray+0x7e>
				&& (ptrAddress + (Local_Index * FLASH_WORD)) < FLASH_END
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	005a      	lsls	r2, r3, #1
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <FLASH_enWriteArray+0xa4>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d218      	bcs.n	8000546 <FLASH_enWriteArray+0x7e>
				&& Local_state == FLASH_OK) {
 8000514:	7dfb      	ldrb	r3, [r7, #23]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d115      	bne.n	8000546 <FLASH_enWriteArray+0x7e>

			if (*(volatile u32*) (ptrAddress + (Local_Index * FLASH_WORD))
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	005a      	lsls	r2, r3, #1
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4413      	add	r3, r2
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000528:	d002      	beq.n	8000530 <FLASH_enWriteArray+0x68>
					!= 0xffffffff) {

				Local_state = FLASH_WRITTEN;
 800052a:	2301      	movs	r3, #1
 800052c:	75fb      	strb	r3, [r7, #23]
				break;
 800052e:	e016      	b.n	800055e <FLASH_enWriteArray+0x96>
			} else {
				*(volatile u16*) (ptrAddress + (Local_Index * FLASH_WORD)) =
						Arr_u8Data[Local_Index];
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	4413      	add	r3, r2
				*(volatile u16*) (ptrAddress + (Local_Index * FLASH_WORD)) =
 8000538:	693a      	ldr	r2, [r7, #16]
 800053a:	0051      	lsls	r1, r2, #1
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	440a      	add	r2, r1
						Arr_u8Data[Local_Index];
 8000540:	881b      	ldrh	r3, [r3, #0]
				*(volatile u16*) (ptrAddress + (Local_Index * FLASH_WORD)) =
 8000542:	8013      	strh	r3, [r2, #0]
			if (*(volatile u32*) (ptrAddress + (Local_Index * FLASH_WORD))
 8000544:	e002      	b.n	800054c <FLASH_enWriteArray+0x84>
			}

		} else {

			//out of range
			Local_state = FLASH_OUTOFRANGE;
 8000546:	2302      	movs	r3, #2
 8000548:	75fb      	strb	r3, [r7, #23]
			break;
 800054a:	e008      	b.n	800055e <FLASH_enWriteArray+0x96>
		}
		FLASH_enWaitClr();         // wait and clr
 800054c:	f7ff ff54 	bl	80003f8 <FLASH_enWaitClr>
	for (u32 Local_Index = 0; Local_Index < Copy_Size; Local_Index++) {
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	3301      	adds	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	693a      	ldr	r2, [r7, #16]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	429a      	cmp	r2, r3
 800055c:	d3cc      	bcc.n	80004f8 <FLASH_enWriteArray+0x30>

	}
	FlASH_enDisablePrograming(); // close prog session
 800055e:	f000 f81b 	bl	8000598 <FlASH_enDisablePrograming>

	return Local_state;
 8000562:	7dfb      	ldrb	r3, [r7, #23]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	0807ffff 	.word	0x0807ffff

08000570 <FlASH_enEnablePrograming>:

// enable flash programming by set PG bit
FLASH_enERR_T FlASH_enEnablePrograming() {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
	FLASH_enERR_T Local_state = FLASH_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
	SET_BIT(FLASH->FLASH_CR, CR_PG);
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <FlASH_enEnablePrograming+0x24>)
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <FlASH_enEnablePrograming+0x24>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6113      	str	r3, [r2, #16]
	return Local_state;
 8000586:	79fb      	ldrb	r3, [r7, #7]
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40022000 	.word	0x40022000

08000598 <FlASH_enDisablePrograming>:

// disable flash programming by set PG bit
FLASH_enERR_T FlASH_enDisablePrograming() {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
	FLASH_enERR_T Local_state = FLASH_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(FLASH->FLASH_CR, CR_PG);
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <FlASH_enDisablePrograming+0x24>)
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <FlASH_enDisablePrograming+0x24>)
 80005a8:	f023 0301 	bic.w	r3, r3, #1
 80005ac:	6113      	str	r3, [r2, #16]
	return Local_state;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40022000 	.word	0x40022000

080005c0 <FLASH_enUnlock>:

FLASH_enERR_T FLASH_enUnlock() {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
	FLASH_enERR_T Local_state = FLASH_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]
	u8 local_FlashLockStatus = READ_BIT(FLASH->FLASH_CR, CR_LOCK);
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <FLASH_enUnlock+0x48>)
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	09db      	lsrs	r3, r3, #7
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	71bb      	strb	r3, [r7, #6]
	if (local_FlashLockStatus == 1) // flash is locked
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d105      	bne.n	80005ea <FLASH_enUnlock+0x2a>
			{
		// unlock sequance
		FLASH->FLASH_KEYR = FLASH_KEY1;
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <FLASH_enUnlock+0x48>)
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <FLASH_enUnlock+0x4c>)
 80005e2:	605a      	str	r2, [r3, #4]
		FLASH->FLASH_KEYR = FLASH_KEY2;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <FLASH_enUnlock+0x48>)
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <FLASH_enUnlock+0x50>)
 80005e8:	605a      	str	r2, [r3, #4]

	} else {
		//dp noting
	}
	if (local_FlashLockStatus == 1) {
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d102      	bne.n	80005f6 <FLASH_enUnlock+0x36>

		Local_state = FLASH_UNLOCKERR;
 80005f0:	2303      	movs	r3, #3
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	e001      	b.n	80005fa <FLASH_enUnlock+0x3a>
	} else {

		Local_state = FLASH_OK;
 80005f6:	2300      	movs	r3, #0
 80005f8:	71fb      	strb	r3, [r7, #7]

	}
	return Local_state;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40022000 	.word	0x40022000
 800060c:	45670123 	.word	0x45670123
 8000610:	cdef89ab 	.word	0xcdef89ab

08000614 <GPIO_u8Init>:
#include "GPIO_Private.h"
#include "GPIO_Interface.h"

extern GPIO_Conf_t GPIO_Conf_ARR[PINTOTAL];

Error_t GPIO_u8Init() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

	for (u8 index = 0; index < PINTOTAL; index++) {
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e00f      	b.n	8000640 <GPIO_u8Init+0x2c>
		GPIO_u8SetPinD_ID(GPIO_Conf_ARR[index].GPIO_u8_pin,
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <GPIO_u8Init+0x3c>)
 8000624:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	4909      	ldr	r1, [pc, #36]	; (8000650 <GPIO_u8Init+0x3c>)
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	440b      	add	r3, r1
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	4619      	mov	r1, r3
 8000634:	4610      	mov	r0, r2
 8000636:	f000 f80d 	bl	8000654 <GPIO_u8SetPinD_ID>
	for (u8 index = 0; index < PINTOTAL; index++) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	3301      	adds	r3, #1
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b2f      	cmp	r3, #47	; 0x2f
 8000644:	d9ec      	bls.n	8000620 <GPIO_u8Init+0xc>
				GPIO_Conf_ARR[index].GPIO_u8_Mode);
	}
	return OK;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08000f74 	.word	0x08000f74

08000654 <GPIO_u8SetPinD_ID>:
		local_state = NOK;
		break;
	}
	return local_state;
}
Error_t GPIO_u8SetPinD_ID(GPIO_u8PIN_t Copy_u8PinId, u8 Copy_u8Mode) {
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	71bb      	strb	r3, [r7, #6]
	u8 local_port = (Copy_u8PinId / GPIO_u8R_PINS) + 1;
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	091b      	lsrs	r3, r3, #4
 8000668:	b2db      	uxtb	r3, r3
 800066a:	3301      	adds	r3, #1
 800066c:	73bb      	strb	r3, [r7, #14]
	u8 local_pin = Copy_u8PinId % GPIO_u8R_PINS;
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 030f 	and.w	r3, r3, #15
 8000674:	737b      	strb	r3, [r7, #13]
	Error_t local_state = OK;
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
	switch (local_port) {
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	2b03      	cmp	r3, #3
 800067e:	d07d      	beq.n	800077c <GPIO_u8SetPinD_ID+0x128>
 8000680:	2b03      	cmp	r3, #3
 8000682:	f300 80b6 	bgt.w	80007f2 <GPIO_u8SetPinD_ID+0x19e>
 8000686:	2b01      	cmp	r3, #1
 8000688:	d002      	beq.n	8000690 <GPIO_u8SetPinD_ID+0x3c>
 800068a:	2b02      	cmp	r3, #2
 800068c:	d03b      	beq.n	8000706 <GPIO_u8SetPinD_ID+0xb2>
 800068e:	e0b0      	b.n	80007f2 <GPIO_u8SetPinD_ID+0x19e>
	case GPIO_PORTA:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 8000690:	7b7b      	ldrb	r3, [r7, #13]
 8000692:	2b07      	cmp	r3, #7
 8000694:	d817      	bhi.n	80006c6 <GPIO_u8SetPinD_ID+0x72>
			GPIO_A->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000696:	4b5b      	ldr	r3, [pc, #364]	; (8000804 <GPIO_u8SetPinD_ID+0x1b0>)
 8000698:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 800069a:	7b7a      	ldrb	r2, [r7, #13]
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	210f      	movs	r1, #15
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_A->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 80006a4:	43d2      	mvns	r2, r2
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a56      	ldr	r2, [pc, #344]	; (8000804 <GPIO_u8SetPinD_ID+0x1b0>)
 80006aa:	400b      	ands	r3, r1
 80006ac:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRL |= ((Copy_u8Mode)
 80006ae:	4b55      	ldr	r3, [pc, #340]	; (8000804 <GPIO_u8SetPinD_ID+0x1b0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 80006b2:	79b9      	ldrb	r1, [r7, #6]
 80006b4:	7b7a      	ldrb	r2, [r7, #13]
 80006b6:	0092      	lsls	r2, r2, #2
 80006b8:	fa01 f202 	lsl.w	r2, r1, r2
 80006bc:	4611      	mov	r1, r2
			GPIO_A->GPIO_CRL |= ((Copy_u8Mode)
 80006be:	4a51      	ldr	r2, [pc, #324]	; (8000804 <GPIO_u8SetPinD_ID+0x1b0>)
 80006c0:	430b      	orrs	r3, r1
 80006c2:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 80006c4:	e098      	b.n	80007f8 <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 80006c6:	7b7b      	ldrb	r3, [r7, #13]
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d819      	bhi.n	8000700 <GPIO_u8SetPinD_ID+0xac>
			GPIO_A->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 80006cc:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <GPIO_u8SetPinD_ID+0x1b0>)
 80006ce:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 80006d0:	7b7a      	ldrb	r2, [r7, #13]
 80006d2:	3a08      	subs	r2, #8
 80006d4:	0092      	lsls	r2, r2, #2
 80006d6:	210f      	movs	r1, #15
 80006d8:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_A->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 80006dc:	43d2      	mvns	r2, r2
 80006de:	4611      	mov	r1, r2
 80006e0:	4a48      	ldr	r2, [pc, #288]	; (8000804 <GPIO_u8SetPinD_ID+0x1b0>)
 80006e2:	400b      	ands	r3, r1
 80006e4:	6053      	str	r3, [r2, #4]
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <GPIO_u8SetPinD_ID+0x1b0>)
 80006e8:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 80006ea:	79b9      	ldrb	r1, [r7, #6]
 80006ec:	7b7a      	ldrb	r2, [r7, #13]
 80006ee:	3a08      	subs	r2, #8
 80006f0:	0092      	lsls	r2, r2, #2
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	4611      	mov	r1, r2
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
 80006f8:	4a42      	ldr	r2, [pc, #264]	; (8000804 <GPIO_u8SetPinD_ID+0x1b0>)
 80006fa:	430b      	orrs	r3, r1
 80006fc:	6053      	str	r3, [r2, #4]
		break;
 80006fe:	e07b      	b.n	80007f8 <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 8000700:	2301      	movs	r3, #1
 8000702:	73fb      	strb	r3, [r7, #15]
		break;
 8000704:	e078      	b.n	80007f8 <GPIO_u8SetPinD_ID+0x1a4>
	case GPIO_PORTB:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 8000706:	7b7b      	ldrb	r3, [r7, #13]
 8000708:	2b07      	cmp	r3, #7
 800070a:	d817      	bhi.n	800073c <GPIO_u8SetPinD_ID+0xe8>
			GPIO_B->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 800070c:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <GPIO_u8SetPinD_ID+0x1b4>)
 800070e:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000710:	7b7a      	ldrb	r2, [r7, #13]
 8000712:	0092      	lsls	r2, r2, #2
 8000714:	210f      	movs	r1, #15
 8000716:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_B->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 800071a:	43d2      	mvns	r2, r2
 800071c:	4611      	mov	r1, r2
 800071e:	4a3a      	ldr	r2, [pc, #232]	; (8000808 <GPIO_u8SetPinD_ID+0x1b4>)
 8000720:	400b      	ands	r3, r1
 8000722:	6013      	str	r3, [r2, #0]
			GPIO_B->GPIO_CRL |= ((Copy_u8Mode)
 8000724:	4b38      	ldr	r3, [pc, #224]	; (8000808 <GPIO_u8SetPinD_ID+0x1b4>)
 8000726:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000728:	79b9      	ldrb	r1, [r7, #6]
 800072a:	7b7a      	ldrb	r2, [r7, #13]
 800072c:	0092      	lsls	r2, r2, #2
 800072e:	fa01 f202 	lsl.w	r2, r1, r2
 8000732:	4611      	mov	r1, r2
			GPIO_B->GPIO_CRL |= ((Copy_u8Mode)
 8000734:	4a34      	ldr	r2, [pc, #208]	; (8000808 <GPIO_u8SetPinD_ID+0x1b4>)
 8000736:	430b      	orrs	r3, r1
 8000738:	6013      	str	r3, [r2, #0]
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 800073a:	e05d      	b.n	80007f8 <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 800073c:	7b7b      	ldrb	r3, [r7, #13]
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d819      	bhi.n	8000776 <GPIO_u8SetPinD_ID+0x122>
			GPIO_B->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <GPIO_u8SetPinD_ID+0x1b4>)
 8000744:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000746:	7b7a      	ldrb	r2, [r7, #13]
 8000748:	3a08      	subs	r2, #8
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	210f      	movs	r1, #15
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_B->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000752:	43d2      	mvns	r2, r2
 8000754:	4611      	mov	r1, r2
 8000756:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <GPIO_u8SetPinD_ID+0x1b4>)
 8000758:	400b      	ands	r3, r1
 800075a:	6053      	str	r3, [r2, #4]
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <GPIO_u8SetPinD_ID+0x1b4>)
 800075e:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000760:	79b9      	ldrb	r1, [r7, #6]
 8000762:	7b7a      	ldrb	r2, [r7, #13]
 8000764:	3a08      	subs	r2, #8
 8000766:	0092      	lsls	r2, r2, #2
 8000768:	fa01 f202 	lsl.w	r2, r1, r2
 800076c:	4611      	mov	r1, r2
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
 800076e:	4a26      	ldr	r2, [pc, #152]	; (8000808 <GPIO_u8SetPinD_ID+0x1b4>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6053      	str	r3, [r2, #4]
		break;
 8000774:	e040      	b.n	80007f8 <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 8000776:	2301      	movs	r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]
		break;
 800077a:	e03d      	b.n	80007f8 <GPIO_u8SetPinD_ID+0x1a4>
	case GPIO_PORTC:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 800077c:	7b7b      	ldrb	r3, [r7, #13]
 800077e:	2b07      	cmp	r3, #7
 8000780:	d817      	bhi.n	80007b2 <GPIO_u8SetPinD_ID+0x15e>
			GPIO_C->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <GPIO_u8SetPinD_ID+0x1b8>)
 8000784:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000786:	7b7a      	ldrb	r2, [r7, #13]
 8000788:	0092      	lsls	r2, r2, #2
 800078a:	210f      	movs	r1, #15
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_C->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000790:	43d2      	mvns	r2, r2
 8000792:	4611      	mov	r1, r2
 8000794:	4a1d      	ldr	r2, [pc, #116]	; (800080c <GPIO_u8SetPinD_ID+0x1b8>)
 8000796:	400b      	ands	r3, r1
 8000798:	6013      	str	r3, [r2, #0]
			GPIO_C->GPIO_CRL |= ((Copy_u8Mode)
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <GPIO_u8SetPinD_ID+0x1b8>)
 800079c:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 800079e:	79b9      	ldrb	r1, [r7, #6]
 80007a0:	7b7a      	ldrb	r2, [r7, #13]
 80007a2:	0092      	lsls	r2, r2, #2
 80007a4:	fa01 f202 	lsl.w	r2, r1, r2
 80007a8:	4611      	mov	r1, r2
			GPIO_C->GPIO_CRL |= ((Copy_u8Mode)
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <GPIO_u8SetPinD_ID+0x1b8>)
 80007ac:	430b      	orrs	r3, r1
 80007ae:	6013      	str	r3, [r2, #0]
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 80007b0:	e022      	b.n	80007f8 <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	2b0f      	cmp	r3, #15
 80007b6:	d819      	bhi.n	80007ec <GPIO_u8SetPinD_ID+0x198>
			GPIO_C->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <GPIO_u8SetPinD_ID+0x1b8>)
 80007ba:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 80007bc:	7b7a      	ldrb	r2, [r7, #13]
 80007be:	3a08      	subs	r2, #8
 80007c0:	0092      	lsls	r2, r2, #2
 80007c2:	210f      	movs	r1, #15
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_C->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 80007c8:	43d2      	mvns	r2, r2
 80007ca:	4611      	mov	r1, r2
 80007cc:	4a0f      	ldr	r2, [pc, #60]	; (800080c <GPIO_u8SetPinD_ID+0x1b8>)
 80007ce:	400b      	ands	r3, r1
 80007d0:	6053      	str	r3, [r2, #4]
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <GPIO_u8SetPinD_ID+0x1b8>)
 80007d4:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 80007d6:	79b9      	ldrb	r1, [r7, #6]
 80007d8:	7b7a      	ldrb	r2, [r7, #13]
 80007da:	3a08      	subs	r2, #8
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	fa01 f202 	lsl.w	r2, r1, r2
 80007e2:	4611      	mov	r1, r2
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
 80007e4:	4a09      	ldr	r2, [pc, #36]	; (800080c <GPIO_u8SetPinD_ID+0x1b8>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6053      	str	r3, [r2, #4]
		break;
 80007ea:	e005      	b.n	80007f8 <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
		break;
 80007f0:	e002      	b.n	80007f8 <GPIO_u8SetPinD_ID+0x1a4>
	default:
		local_state = NOK;
 80007f2:	2301      	movs	r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]
		break;
 80007f6:	bf00      	nop
	}

	return local_state;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	40010800 	.word	0x40010800
 8000808:	40010c00 	.word	0x40010c00
 800080c:	40011000 	.word	0x40011000

08000810 <GPIO_u8SetPinV_ID>:
Error_t GPIO_u8SetPinV_ID(GPIO_u8PIN_t Copy_u8PinId, u8 Copy_u8Value) {
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	460a      	mov	r2, r1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	4613      	mov	r3, r2
 800081e:	71bb      	strb	r3, [r7, #6]
	u8 local_port = (Copy_u8PinId / GPIO_u8R_PINS) + 1;
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	091b      	lsrs	r3, r3, #4
 8000824:	b2db      	uxtb	r3, r3
 8000826:	3301      	adds	r3, #1
 8000828:	73bb      	strb	r3, [r7, #14]
	u8 local_pin = Copy_u8PinId % GPIO_u8R_PINS;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 030f 	and.w	r3, r3, #15
 8000830:	737b      	strb	r3, [r7, #13]
	Error_t local_state = OK;
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]
	switch (local_port) {
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	2b03      	cmp	r3, #3
 800083a:	d028      	beq.n	800088e <GPIO_u8SetPinV_ID+0x7e>
 800083c:	2b03      	cmp	r3, #3
 800083e:	dc37      	bgt.n	80008b0 <GPIO_u8SetPinV_ID+0xa0>
 8000840:	2b01      	cmp	r3, #1
 8000842:	d002      	beq.n	800084a <GPIO_u8SetPinV_ID+0x3a>
 8000844:	2b02      	cmp	r3, #2
 8000846:	d011      	beq.n	800086c <GPIO_u8SetPinV_ID+0x5c>
 8000848:	e032      	b.n	80008b0 <GPIO_u8SetPinV_ID+0xa0>
	case GPIO_PORTA:
		WRITE_BIT(GPIO_A->GPIO_ODR, local_pin, Copy_u8Value);
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <GPIO_u8SetPinV_ID+0xb4>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	7b7a      	ldrb	r2, [r7, #13]
 8000850:	2101      	movs	r1, #1
 8000852:	fa01 f202 	lsl.w	r2, r1, r2
 8000856:	43d2      	mvns	r2, r2
 8000858:	4013      	ands	r3, r2
 800085a:	79b9      	ldrb	r1, [r7, #6]
 800085c:	7b7a      	ldrb	r2, [r7, #13]
 800085e:	fa01 f202 	lsl.w	r2, r1, r2
 8000862:	4611      	mov	r1, r2
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <GPIO_u8SetPinV_ID+0xb4>)
 8000866:	430b      	orrs	r3, r1
 8000868:	60d3      	str	r3, [r2, #12]
		break;
 800086a:	e024      	b.n	80008b6 <GPIO_u8SetPinV_ID+0xa6>
	case GPIO_PORTB:
		WRITE_BIT(GPIO_B->GPIO_ODR, local_pin, Copy_u8Value);
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <GPIO_u8SetPinV_ID+0xb8>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	7b7a      	ldrb	r2, [r7, #13]
 8000872:	2101      	movs	r1, #1
 8000874:	fa01 f202 	lsl.w	r2, r1, r2
 8000878:	43d2      	mvns	r2, r2
 800087a:	4013      	ands	r3, r2
 800087c:	79b9      	ldrb	r1, [r7, #6]
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	4611      	mov	r1, r2
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <GPIO_u8SetPinV_ID+0xb8>)
 8000888:	430b      	orrs	r3, r1
 800088a:	60d3      	str	r3, [r2, #12]
		break;
 800088c:	e013      	b.n	80008b6 <GPIO_u8SetPinV_ID+0xa6>
	case GPIO_PORTC:
		WRITE_BIT(GPIO_C->GPIO_ODR, local_pin, Copy_u8Value);
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <GPIO_u8SetPinV_ID+0xbc>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	7b7a      	ldrb	r2, [r7, #13]
 8000894:	2101      	movs	r1, #1
 8000896:	fa01 f202 	lsl.w	r2, r1, r2
 800089a:	43d2      	mvns	r2, r2
 800089c:	4013      	ands	r3, r2
 800089e:	79b9      	ldrb	r1, [r7, #6]
 80008a0:	7b7a      	ldrb	r2, [r7, #13]
 80008a2:	fa01 f202 	lsl.w	r2, r1, r2
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <GPIO_u8SetPinV_ID+0xbc>)
 80008aa:	430b      	orrs	r3, r1
 80008ac:	60d3      	str	r3, [r2, #12]
		break;
 80008ae:	e002      	b.n	80008b6 <GPIO_u8SetPinV_ID+0xa6>
	default:
		local_state = NOK;
 80008b0:	2301      	movs	r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
		break;
 80008b4:	bf00      	nop
	}

	return local_state;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40010800 	.word	0x40010800
 80008c8:	40010c00 	.word	0x40010c00
 80008cc:	40011000 	.word	0x40011000

080008d0 <HEX_voidParseFrame>:


// this function parsing data
void HEX_voidParseFrame(u8 *Array_u8RecivedArray, u16 *ptr_u16ReturnAddress,
		u8 *ptr_u8Data, u8 *ptr_u8SizeData, u8 *ptr_u8checkSum,
		u8 *ptr_u8DataType) {
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]

	u8 local_u8index = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	75fb      	strb	r3, [r7, #23]

	*ptr_u8SizeData = Array_u8RecivedArray[HEX_RECORD_LEN_POS];   // data size
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	701a      	strb	r2, [r3, #0]
	*ptr_u16ReturnAddress = (u16) Array_u8RecivedArray[HEX_RECORD_ADDRES_POS]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	781b      	ldrb	r3, [r3, #0]
			<< 8 | Array_u8RecivedArray[HEX_RECORD_ADDRES_POS + 1];   // address
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3302      	adds	r3, #2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21b      	sxth	r3, r3
 8000900:	b29a      	uxth	r2, r3
	*ptr_u16ReturnAddress = (u16) Array_u8RecivedArray[HEX_RECORD_ADDRES_POS]
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	801a      	strh	r2, [r3, #0]
	*ptr_u8DataType = Array_u8RecivedArray[HEX_RECORD_TYPE_POS];    // data type
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	78da      	ldrb	r2, [r3, #3]
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	701a      	strb	r2, [r3, #0]
	for ( local_u8index = 0; local_u8index < *ptr_u8SizeData;
 800090e:	2300      	movs	r3, #0
 8000910:	75fb      	strb	r3, [r7, #23]
 8000912:	e00c      	b.n	800092e <HEX_voidParseFrame+0x5e>
			local_u8index++) {   // data array
		ptr_u8Data[local_u8index] = Array_u8RecivedArray[HEX_RECORD_DATA_POS+local_u8index];
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	3304      	adds	r3, #4
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	441a      	add	r2, r3
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	440b      	add	r3, r1
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	701a      	strb	r2, [r3, #0]
			local_u8index++) {   // data array
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	3301      	adds	r3, #1
 800092c:	75fb      	strb	r3, [r7, #23]
	for ( local_u8index = 0; local_u8index < *ptr_u8SizeData;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	7dfa      	ldrb	r2, [r7, #23]
 8000934:	429a      	cmp	r2, r3
 8000936:	d3ed      	bcc.n	8000914 <HEX_voidParseFrame+0x44>

	}
	for (; local_u8index < HEX_LINE_MAX; local_u8index++) { // fill array
 8000938:	e007      	b.n	800094a <HEX_voidParseFrame+0x7a>
		ptr_u8Data[local_u8index] = 0;
 800093a:	7dfb      	ldrb	r3, [r7, #23]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
	for (; local_u8index < HEX_LINE_MAX; local_u8index++) { // fill array
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	3301      	adds	r3, #1
 8000948:	75fb      	strb	r3, [r7, #23]
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d9f4      	bls.n	800093a <HEX_voidParseFrame+0x6a>
	}
	*ptr_u8checkSum = Array_u8RecivedArray[HEX_RECORD_CKECKSUM_POS(
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3304      	adds	r3, #4
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	6a3b      	ldr	r3, [r7, #32]
 8000960:	701a      	strb	r2, [r3, #0]
			*ptr_u8SizeData)];
}
 8000962:	bf00      	nop
 8000964:	371c      	adds	r7, #28
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <RedesignHex1Bytes>:

	}

}

void RedesignHex1Bytes(u8 *CopyStringHex, u8 *OutArray, u8 Copy_u8Size) {
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	4613      	mov	r3, r2
 8000978:	71fb      	strb	r3, [r7, #7]
	u16 Local_temp0 = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	82bb      	strh	r3, [r7, #20]

	u8 Local_index = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	75fb      	strb	r3, [r7, #23]

	for (Local_index = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	75fb      	strb	r3, [r7, #23]
 8000986:	e077      	b.n	8000a78 <RedesignHex1Bytes+0x10c>
			Local_index < Copy_u8Size && CopyStringHex[(Local_index * 2)];
			Local_index++) {

		for (u8 Local_index1 = 0; Local_index1 < 2; Local_index1++) {
 8000988:	2300      	movs	r3, #0
 800098a:	75bb      	strb	r3, [r7, #22]
 800098c:	e04f      	b.n	8000a2e <RedesignHex1Bytes+0xc2>
			if ((CopyStringHex[(Local_index * 2) + Local_index1]) >= '0'
 800098e:	7dfb      	ldrb	r3, [r7, #23]
 8000990:	005a      	lsls	r2, r3, #1
 8000992:	7dbb      	ldrb	r3, [r7, #22]
 8000994:	4413      	add	r3, r2
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b2f      	cmp	r3, #47	; 0x2f
 80009a0:	d91c      	bls.n	80009dc <RedesignHex1Bytes+0x70>
					&& (CopyStringHex[(Local_index * 2) + Local_index1])
 80009a2:	7dfb      	ldrb	r3, [r7, #23]
 80009a4:	005a      	lsls	r2, r3, #1
 80009a6:	7dbb      	ldrb	r3, [r7, #22]
 80009a8:	4413      	add	r3, r2
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b39      	cmp	r3, #57	; 0x39
 80009b4:	d812      	bhi.n	80009dc <RedesignHex1Bytes+0x70>
							<= '9') {
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
						(CopyStringHex[(Local_index * 2) + Local_index1]) - '0';
 80009b6:	7dfb      	ldrb	r3, [r7, #23]
 80009b8:	005a      	lsls	r2, r3, #1
 80009ba:	7dbb      	ldrb	r3, [r7, #22]
 80009bc:	4413      	add	r3, r2
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	781a      	ldrb	r2, [r3, #0]
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
 80009c6:	7dfb      	ldrb	r3, [r7, #23]
 80009c8:	0059      	lsls	r1, r3, #1
 80009ca:	7dbb      	ldrb	r3, [r7, #22]
 80009cc:	440b      	add	r3, r1
 80009ce:	4619      	mov	r1, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	440b      	add	r3, r1
						(CopyStringHex[(Local_index * 2) + Local_index1]) - '0';
 80009d4:	3a30      	subs	r2, #48	; 0x30
 80009d6:	b2d2      	uxtb	r2, r2
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e025      	b.n	8000a28 <RedesignHex1Bytes+0xbc>
			} else if ((CopyStringHex[(Local_index * 2) + Local_index1]) >= 'A'
 80009dc:	7dfb      	ldrb	r3, [r7, #23]
 80009de:	005a      	lsls	r2, r3, #1
 80009e0:	7dbb      	ldrb	r3, [r7, #22]
 80009e2:	4413      	add	r3, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b40      	cmp	r3, #64	; 0x40
 80009ee:	d91b      	bls.n	8000a28 <RedesignHex1Bytes+0xbc>
					&& (CopyStringHex[(Local_index * 2) + Local_index1])
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	005a      	lsls	r2, r3, #1
 80009f4:	7dbb      	ldrb	r3, [r7, #22]
 80009f6:	4413      	add	r3, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b46      	cmp	r3, #70	; 0x46
 8000a02:	d811      	bhi.n	8000a28 <RedesignHex1Bytes+0xbc>
							<= 'F') {
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
						((CopyStringHex[(Local_index * 2) + Local_index1]) - 'A')
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
 8000a06:	005a      	lsls	r2, r3, #1
 8000a08:	7dbb      	ldrb	r3, [r7, #22]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4413      	add	r3, r2
 8000a12:	781a      	ldrb	r2, [r3, #0]
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
 8000a16:	0059      	lsls	r1, r3, #1
 8000a18:	7dbb      	ldrb	r3, [r7, #22]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	440b      	add	r3, r1
								+ 10;
 8000a22:	3a37      	subs	r2, #55	; 0x37
 8000a24:	b2d2      	uxtb	r2, r2
				(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8000a26:	701a      	strb	r2, [r3, #0]
		for (u8 Local_index1 = 0; Local_index1 < 2; Local_index1++) {
 8000a28:	7dbb      	ldrb	r3, [r7, #22]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	75bb      	strb	r3, [r7, #22]
 8000a2e:	7dbb      	ldrb	r3, [r7, #22]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d9ac      	bls.n	800098e <RedesignHex1Bytes+0x22>

			} else {
				//do nothing
			}
		}
		Local_temp0 = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	82bb      	strh	r3, [r7, #20]

		Local_temp0 = ((CopyStringHex[(Local_index * 2)] & 0x0f) << 4)
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	b21a      	sxth	r2, r3
				| (CopyStringHex[(Local_index * 2) + 1] & 0x0f);
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	3301      	adds	r3, #1
 8000a52:	68f9      	ldr	r1, [r7, #12]
 8000a54:	440b      	add	r3, r1
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b21b      	sxth	r3, r3
		Local_temp0 = ((CopyStringHex[(Local_index * 2)] & 0x0f) << 4)
 8000a64:	82bb      	strh	r3, [r7, #20]
		/*(((CopyStringHex[(Local_index * 4) + 3])) & 0x0f)
		 | ((((CopyStringHex[(Local_index * 4) + 2])) & 0x0f) << 4);
		 Local_temp1 = (((CopyStringHex[(Local_index * 4) + 1])) & 0x0f)
		 | ((((CopyStringHex[Local_index * 4])) & 0x0f) << 4);
		 */
		OutArray[Local_index] = Local_temp0;
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	8aba      	ldrh	r2, [r7, #20]
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	701a      	strb	r2, [r3, #0]
			Local_index++) {
 8000a72:	7dfb      	ldrb	r3, [r7, #23]
 8000a74:	3301      	adds	r3, #1
 8000a76:	75fb      	strb	r3, [r7, #23]
			Local_index < Copy_u8Size && CopyStringHex[(Local_index * 2)];
 8000a78:	7dfa      	ldrb	r2, [r7, #23]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d211      	bcs.n	8000aa4 <RedesignHex1Bytes+0x138>
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f47f af7b 	bne.w	8000988 <RedesignHex1Bytes+0x1c>
		//	UART1_u8SendNumString(OutArray[Local_index]);

		//	UART1_u8SendStringBusyW8("\n");

	}
	for (; Local_index < Copy_u8Size; Local_index++) {
 8000a92:	e007      	b.n	8000aa4 <RedesignHex1Bytes+0x138>
		OutArray[Local_index] = 0;
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	for (; Local_index < Copy_u8Size; Local_index++) {
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	75fb      	strb	r3, [r7, #23]
 8000aa4:	7dfa      	ldrb	r2, [r7, #23]
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3f3      	bcc.n	8000a94 <RedesignHex1Bytes+0x128>
	}

}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	371c      	adds	r7, #28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <NVIC_u8Set_EN_IRQ>:
	SCB_AIRCR = NVIC_PR_OPTIONS;

	return OK;
}

Error_t NVIC_u8Set_EN_IRQ(NVIC_Prority_t Copy_IRQ_ID) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	Error_t Copy_status = OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	73fb      	strb	r3, [r7, #15]
	u8 Copy_ID_Index = Copy_IRQ_ID / NVIC_REG_SIZE;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	095b      	lsrs	r3, r3, #5
 8000aca:	73bb      	strb	r3, [r7, #14]
	if (Copy_IRQ_ID < INTERRUPT_TOTAL) {
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b3b      	cmp	r3, #59	; 0x3b
 8000ad0:	d80c      	bhi.n	8000aec <NVIC_u8Set_EN_IRQ+0x34>
		Copy_IRQ_ID = Copy_IRQ_ID % NVIC_REG_SIZE;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 031f 	and.w	r3, r3, #31
 8000ad8:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[Copy_ID_Index] = 1 << Copy_IRQ_ID;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2201      	movs	r2, #1
 8000ade:	fa02 f103 	lsl.w	r1, r2, r3
 8000ae2:	4a06      	ldr	r2, [pc, #24]	; (8000afc <NVIC_u8Set_EN_IRQ+0x44>)
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aea:	e001      	b.n	8000af0 <NVIC_u8Set_EN_IRQ+0x38>
	} else {
		Copy_status = NOK;
 8000aec:	2301      	movs	r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
	}
	return Copy_status;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <RCC_voidInitSystemClock>:
#include "RCC_Private.h"
#include "RCC_CONF.h"
#include "RCC_Interface.h"

void RCC_voidInitSystemClock(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
#if RCC_u8CLK_TYPE==RCC_u8HSE_CRYSTAL
	RCC->RCC_CR=0x00010080;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <RCC_voidInitSystemClock+0x14>)
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <RCC_voidInitSystemClock+0x18>)
 8000b08:	601a      	str	r2, [r3, #0]
	RCC->RCC_CR = 0x00010080;
#else
	#error("You choosed wrong Clock Type")
#endif

}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	00010080 	.word	0x00010080

08000b1c <RCC_voidEnablePeriphralCLK>:

Error_t RCC_voidEnablePeriphralCLK(PeriphralBusId_t Copy_enPeriphralId)
{	
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8BusID =Copy_enPeriphralId/100;
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <RCC_voidEnablePeriphralCLK+0xa4>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8PeriphralID =Copy_enPeriphralId % 100;
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <RCC_voidEnablePeriphralCLK+0xa4>)
 8000b38:	fba2 1203 	umull	r1, r2, r2, r3
 8000b3c:	0952      	lsrs	r2, r2, #5
 8000b3e:	2164      	movs	r1, #100	; 0x64
 8000b40:	fb01 f202 	mul.w	r2, r1, r2
 8000b44:	1a9b      	subs	r3, r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	737b      	strb	r3, [r7, #13]

	Error_t Local_enErrorState=OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]

	if(Local_u8PeriphralID  <= 31) //unsigned
 8000b4e:	7b7b      	ldrb	r3, [r7, #13]
 8000b50:	2b1f      	cmp	r3, #31
 8000b52:	d82d      	bhi.n	8000bb0 <RCC_voidEnablePeriphralCLK+0x94>
	{
		switch(Local_u8BusID)
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d01c      	beq.n	8000b94 <RCC_voidEnablePeriphralCLK+0x78>
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	dc25      	bgt.n	8000baa <RCC_voidEnablePeriphralCLK+0x8e>
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d002      	beq.n	8000b68 <RCC_voidEnablePeriphralCLK+0x4c>
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d00b      	beq.n	8000b7e <RCC_voidEnablePeriphralCLK+0x62>
 8000b66:	e020      	b.n	8000baa <RCC_voidEnablePeriphralCLK+0x8e>
		{
		case RCC_u8AHB: SET_BIT(RCC->RCC_AHBENR,Local_u8PeriphralID) ;    	
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	7b7a      	ldrb	r2, [r7, #13]
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fa01 f202 	lsl.w	r2, r1, r2
 8000b74:	4611      	mov	r1, r2
 8000b76:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6153      	str	r3, [r2, #20]
			break;
 8000b7c:	e01a      	b.n	8000bb4 <RCC_voidEnablePeriphralCLK+0x98>

		case RCC_u8APB2:SET_BIT(RCC->RCC_APB2ENR,Local_u8PeriphralID) ;	
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	7b7a      	ldrb	r2, [r7, #13]
 8000b84:	2101      	movs	r1, #1
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	6193      	str	r3, [r2, #24]
			break;
 8000b92:	e00f      	b.n	8000bb4 <RCC_voidEnablePeriphralCLK+0x98>

		case RCC_u8APB1: SET_BIT(RCC->RCC_APB1ENR,Local_u8PeriphralID) ;	
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	7b7a      	ldrb	r2, [r7, #13]
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	61d3      	str	r3, [r2, #28]
			break;
 8000ba8:	e004      	b.n	8000bb4 <RCC_voidEnablePeriphralCLK+0x98>
			
			
			
		default:
			Local_enErrorState=NOK;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
			break;
 8000bae:	e001      	b.n	8000bb4 <RCC_voidEnablePeriphralCLK+0x98>
		}

	}
	else
	{
		Local_enErrorState=NOK;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]

	}

	return Local_enErrorState;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	51eb851f 	.word	0x51eb851f
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <main>:
#include "../Systick/SYSTICK_Interface.h"
#include "../NVIC/NVIC_Interface.h"

#include "../Bootloader/Bootloader_Interface.h"

int main(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

	RCC_voidInitSystemClock();
 8000bcc:	f7ff ff98 	bl	8000b00 <RCC_voidInitSystemClock>
	STK_u8Init();
 8000bd0:	f000 f83e 	bl	8000c50 <STK_u8Init>
	RCC_voidEnablePeriphralCLK(APB2_IOPAEN);
 8000bd4:	20ca      	movs	r0, #202	; 0xca
 8000bd6:	f7ff ffa1 	bl	8000b1c <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPBEN);
 8000bda:	20cb      	movs	r0, #203	; 0xcb
 8000bdc:	f7ff ff9e 	bl	8000b1c <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPCEN);
 8000be0:	20cc      	movs	r0, #204	; 0xcc
 8000be2:	f7ff ff9b 	bl	8000b1c <RCC_voidEnablePeriphralCLK>

	GPIO_u8Init();
 8000be6:	f7ff fd15 	bl	8000614 <GPIO_u8Init>
	//UART1_voidInit();

	GPIO_u8SetPinV_ID(Pin_B1, LOW);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2011      	movs	r0, #17
 8000bee:	f7ff fe0f 	bl	8000810 <GPIO_u8SetPinV_ID>
	Bootloader_Init();
 8000bf2:	f7ff fabd 	bl	8000170 <Bootloader_Init>

		//func();
#endif
#if 1

Bootloader_voidfReciveFlash();
 8000bf6:	f7ff facf 	bl	8000198 <Bootloader_voidfReciveFlash>
 8000bfa:	e7fc      	b.n	8000bf6 <main+0x2e>

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f000 f969 	bl	8000f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff ffcb 	bl	8000bc8 <main>

08000c32 <LoopForever>:

LoopForever:
  b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c40:	08000fdc 	.word	0x08000fdc
  ldr r2, =_sbss
 8000c44:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c48:	200000c8 	.word	0x200000c8

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <STK_u8Init>:
#include"SYSTICK_Interface.h"

static void (*STK_PtrCallBack)(void) = {NULLPTR };
static u8 STK_CHAECK_PERODIC = 0;
static u8 STK_ProtectionFlage = 0;
Error_t STK_u8Init() {
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

// Enable ISR
#if STK_SOURCE == STK_u8AHB
	SET_BIT(SYSTICK->STK_CTRL ,2);
	#elif STK_SOURCE == STK_u8AHB_8
	CLR_BIT(SYSTICK->STK_CTRL, 2);
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <STK_u8Init+0x1c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <STK_u8Init+0x1c>)
 8000c5a:	f023 0304 	bic.w	r3, r3, #4
 8000c5e:	6013      	str	r3, [r2, #0]
     #warning"define STK_SOURCE "
	#endif 
	// enable STK
	//SET_BIT(SYSTICK->STK_CTRL, 0);
	// Enable CR source
	return OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <STK_u8SetBusyWait>:
Error_t STK_u8SetBusyWait(u32 Copy_time_MS) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	Error_t local_u8status = OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
	// disable inturrupt
	STK_u8DSInterrupt();
 8000c7c:	f000 f842 	bl	8000d04 <STK_u8DSInterrupt>
	// set loud
	//STK_u8StopTimer();
	Copy_time_MS = Copy_time_MS * 1000;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c86:	fb02 f303 	mul.w	r3, r2, r3
 8000c8a:	607b      	str	r3, [r7, #4]
	if (Copy_time_MS < STK_MAXVALUE) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d209      	bcs.n	8000caa <STK_u8SetBusyWait+0x3a>
		SYSTICK->STK_LOAD = Copy_time_MS;
 8000c96:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <STK_u8SetBusyWait+0x5c>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6053      	str	r3, [r2, #4]
		SET_BIT(SYSTICK->STK_CTRL, 0);
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <STK_u8SetBusyWait+0x5c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <STK_u8SetBusyWait+0x5c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e001      	b.n	8000cae <STK_u8SetBusyWait+0x3e>
	} else {
		local_u8status = NOK;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
	}
	// W8 counter flage
	while (!READ_BIT(SYSTICK->STK_CTRL, 16)) {
 8000cae:	bf00      	nop
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <STK_u8SetBusyWait+0x5c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f9      	beq.n	8000cb0 <STK_u8SetBusyWait+0x40>
		// do noting
	}
	// stop timer
	STK_u8StopTimer();
 8000cbc:	f000 f808 	bl	8000cd0 <STK_u8StopTimer>
	// return
	return local_u8status;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]

}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <STK_u8StopTimer>:
	}

	// return
	return local_u8status;
}
Error_t STK_u8StopTimer() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	// set loud and value with zeroxs
	Error_t local_u8status = OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(SYSTICK->STK_CTRL, 0);
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <STK_u8StopTimer+0x30>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <STK_u8StopTimer+0x30>)
 8000ce0:	f023 0301 	bic.w	r3, r3, #1
 8000ce4:	6013      	str	r3, [r2, #0]
	SYSTICK->STK_LOAD = 0;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <STK_u8StopTimer+0x30>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
	SYSTICK->STK_VAL = 0;
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <STK_u8StopTimer+0x30>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
	STK_u8DSInterrupt();
 8000cf2:	f000 f807 	bl	8000d04 <STK_u8DSInterrupt>

	return local_u8status;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <STK_u8DSInterrupt>:
Error_t STK_u8ENInterrupt() {
	SET_BIT(SYSTICK->STK_CTRL, 1);
	return OK;

}
Error_t STK_u8DSInterrupt() {
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	CLR_BIT(SYSTICK->STK_CTRL, 1);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <STK_u8DSInterrupt+0x1c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <STK_u8DSInterrupt+0x1c>)
 8000d0e:	f023 0302 	bic.w	r3, r3, #2
 8000d12:	6013      	str	r3, [r2, #0]
	return OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <SysTick_Handler>:
	} else {
		local_u8status = NOK;
	}
	return local_u8status;
}
void SysTick_Handler() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

	if (STK_CHAECK_PERODIC == 1) {
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <SysTick_Handler+0x28>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d107      	bne.n	8000d40 <SysTick_Handler+0x1c>
		STK_u8StopTimer();
 8000d30:	f7ff ffce 	bl	8000cd0 <STK_u8StopTimer>
		STK_CHAECK_PERODIC = 0;
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Handler+0x28>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
		STK_ProtectionFlage = 0;
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Handler+0x2c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
	} else {
		// do nothing
	}
	STK_PtrCallBack();
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Handler+0x30>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4798      	blx	r3

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000c0 	.word	0x200000c0
 8000d50:	200000c1 	.word	0x200000c1
 8000d54:	200000bc 	.word	0x200000bc

08000d58 <UART1_voidInit>:
/*
 void (*UART1_CallBack[UART_CALLBACK_SIZE])(void) =
 {	NULLPTR, NULLPTR,NULLPTR,NULLPTR };
 */

void UART1_voidInit() {
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

	/******** baud rate **********/
	UART1->USART_BRR = BAUDRATE;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d5e:	f240 3241 	movw	r2, #833	; 0x341
 8000d62:	609a      	str	r2, [r3, #8]

	/******** frame format *******/
//no parity
	CLR_BIT(UART1->USART_CR1, PCE);
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d6e:	60d3      	str	r3, [r2, #12]
// 1 start 8bit data n stop
	CLR_BIT(UART1->USART_CR1, M);
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d7a:	60d3      	str	r3, [r2, #12]
// 1 stop bit
	CLR_BIT(UART1->USART_CR2, StOP_0);
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d86:	6113      	str	r3, [r2, #16]
	CLR_BIT(UART1->USART_CR2, StOP_1);
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d92:	6113      	str	r3, [r2, #16]

	/******** enable RX **********/
	SET_BIT(UART1->USART_CR1, RE);
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <UART1_voidInit+0x70>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	60d3      	str	r3, [r2, #12]
	/******** enable TX **********/
	SET_BIT(UART1->USART_CR1, TE);
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <UART1_voidInit+0x70>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <UART1_voidInit+0x70>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	60d3      	str	r3, [r2, #12]
	/*********UART enable ********/
	SET_BIT(UART1->USART_CR1, UE);
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <UART1_voidInit+0x70>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <UART1_voidInit+0x70>)
 8000db2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000db6:	60d3      	str	r3, [r2, #12]
	// clr status reg
	UART1->USART_SR = 0;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <UART1_voidInit+0x70>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40013800 	.word	0x40013800

08000dcc <UART1_u8SendByteBusyw8>:

Error_t UART1_u8SendByteBusyw8(u8 data) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	Error_t local_u8Status = OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]
	while (!READ_BIT(UART1->USART_SR, TXE))
 8000dda:	bf00      	nop
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <UART1_u8SendByteBusyw8+0x3c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f9      	beq.n	8000ddc <UART1_u8SendByteBusyw8+0x10>
		; // txe ---- time out is needed
	UART1->USART_DR = data;
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <UART1_u8SendByteBusyw8+0x3c>)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	6053      	str	r3, [r2, #4]
	CLR_BIT(UART1->USART_SR, TXE);
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <UART1_u8SendByteBusyw8+0x3c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <UART1_u8SendByteBusyw8+0x3c>)
 8000df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000df8:	6013      	str	r3, [r2, #0]
	return local_u8Status;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40013800 	.word	0x40013800

08000e0c <UART1_u8SendStringBusyW8>:
	*data = UART1->USART_DR;
	CLR_BIT(UART1->USART_SR, RXNE);
	return local_u8Status;
}

Error_t UART1_u8SendStringBusyW8(char *data) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73bb      	strb	r3, [r7, #14]

	for (u8 local_index = 0; data[local_index]; local_index++) {
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	e009      	b.n	8000e32 <UART1_u8SendStringBusyW8+0x26>
		UART1_u8SendByteBusyw8(data[local_index]);
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	4413      	add	r3, r2
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ffd0 	bl	8000dcc <UART1_u8SendByteBusyw8>
	for (u8 local_index = 0; data[local_index]; local_index++) {
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1ef      	bne.n	8000e1e <UART1_u8SendStringBusyW8+0x12>
	}
	return local_u8Status;
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <UART1_u8RecieveByte>:

	return local_u8Status;

}

Error_t UART1_u8RecieveByte(volatile u8 *data) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
// return DR reg
	*data = UART1->USART_DR;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <UART1_u8RecieveByte+0x24>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	701a      	strb	r2, [r3, #0]
	return local_u8Status;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40013800 	.word	0x40013800

08000e70 <UART1_u8EnterruptEnRX>:
	UART1_MUNRX = 0;
	UART1_DataReady = 0;
}

Error_t UART1_u8RecieveStringBusyW8(u8 *data);
Error_t UART1_u8EnterruptEnRX(void) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
	Error_t local_u8Status = OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	71fb      	strb	r3, [r7, #7]
	SET_BIT(UART1->USART_CR1, RXNEIE);
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <UART1_u8EnterruptEnRX+0x24>)
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <UART1_u8EnterruptEnRX+0x24>)
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	60d3      	str	r3, [r2, #12]
	return local_u8Status;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40013800 	.word	0x40013800

08000e98 <UART1_u8EnterruptCallBackRX>:
Error_t UART1_u8EnterruptDsRX(void) {
	Error_t local_u8Status = OK;
	CLR_BIT(UART1->USART_CR1, RXNEIE);
	return local_u8Status;
}
Error_t UART1_u8EnterruptCallBackRX(void (*Rx)(void)) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
	if (Rx != NULLPTR) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <UART1_u8EnterruptCallBackRX+0x1a>
		GlobalRX = Rx;
 8000eaa:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <UART1_u8EnterruptCallBackRX+0x2c>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e001      	b.n	8000eb6 <UART1_u8EnterruptCallBackRX+0x1e>
	} else {
		local_u8Status = NULL_PTR;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	73fb      	strb	r3, [r7, #15]
	}
	return local_u8Status;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200000c4 	.word	0x200000c4

08000ec8 <USART1_IRQHandler>:
	Error_t local_u8Status = OK;

	return local_u8Status;
}

void USART1_IRQHandler(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	 } else {
	 // do nothing
	 }
	 }
	 */
	if (READ_BIT(UART1->USART_SR, RXNE)) {
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <USART1_IRQHandler+0x30>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00c      	beq.n	8000ef2 <USART1_IRQHandler+0x2a>
		if (GlobalRX) {
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <USART1_IRQHandler+0x34>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <USART1_IRQHandler+0x1e>
			GlobalRX();
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <USART1_IRQHandler+0x34>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4798      	blx	r3

		}
		CLR_BIT(UART1->USART_SR, RXNE);
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <USART1_IRQHandler+0x30>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <USART1_IRQHandler+0x30>)
 8000eec:	f023 0320 	bic.w	r3, r3, #32
 8000ef0:	6013      	str	r3, [r2, #0]

	}

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	200000c4 	.word	0x200000c4

08000f00 <__libc_init_array>:
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	2600      	movs	r6, #0
 8000f04:	4d0c      	ldr	r5, [pc, #48]	; (8000f38 <__libc_init_array+0x38>)
 8000f06:	4c0d      	ldr	r4, [pc, #52]	; (8000f3c <__libc_init_array+0x3c>)
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	10a4      	asrs	r4, r4, #2
 8000f0c:	42a6      	cmp	r6, r4
 8000f0e:	d109      	bne.n	8000f24 <__libc_init_array+0x24>
 8000f10:	f000 f81a 	bl	8000f48 <_init>
 8000f14:	2600      	movs	r6, #0
 8000f16:	4d0a      	ldr	r5, [pc, #40]	; (8000f40 <__libc_init_array+0x40>)
 8000f18:	4c0a      	ldr	r4, [pc, #40]	; (8000f44 <__libc_init_array+0x44>)
 8000f1a:	1b64      	subs	r4, r4, r5
 8000f1c:	10a4      	asrs	r4, r4, #2
 8000f1e:	42a6      	cmp	r6, r4
 8000f20:	d105      	bne.n	8000f2e <__libc_init_array+0x2e>
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
 8000f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f28:	4798      	blx	r3
 8000f2a:	3601      	adds	r6, #1
 8000f2c:	e7ee      	b.n	8000f0c <__libc_init_array+0xc>
 8000f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f32:	4798      	blx	r3
 8000f34:	3601      	adds	r6, #1
 8000f36:	e7f2      	b.n	8000f1e <__libc_init_array+0x1e>
 8000f38:	08000fd4 	.word	0x08000fd4
 8000f3c:	08000fd4 	.word	0x08000fd4
 8000f40:	08000fd4 	.word	0x08000fd4
 8000f44:	08000fd8 	.word	0x08000fd8

08000f48 <_init>:
 8000f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4a:	bf00      	nop
 8000f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f4e:	bc08      	pop	{r3}
 8000f50:	469e      	mov	lr, r3
 8000f52:	4770      	bx	lr

08000f54 <_fini>:
 8000f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f56:	bf00      	nop
 8000f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5a:	bc08      	pop	{r3}
 8000f5c:	469e      	mov	lr, r3
 8000f5e:	4770      	bx	lr
